{"version":3,"sources":["webpack:///./src/components/seo.tsx","webpack:///./src/pages/allPosts.tsx"],"names":["SEO","props","description","lang","meta","title","keywords","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","AllPosts","data","mapTitle","allMarkdownRemark","edges","map","index","node","href","fields","slug","frontmatter","tags","category","config","className"],"mappings":"2FAAA,iDAYA,SAASA,EAAIC,GAAqB,IACxBC,EAA6CD,EAA7CC,YAAaC,EAAgCF,EAAhCE,KAAMC,EAA0BH,EAA1BG,KAAMC,EAAoBJ,EAApBI,MAAOC,EAAaL,EAAbK,SAEhCC,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBP,UAAeK,EAAKG,aAAaR,YAEzD,OACE,gBAAC,IAAD,CACES,eAAgB,CACdR,QAEFE,MAAOA,EACPO,cAAyB,SAAVP,EAAmBE,EAAKG,aAAaL,MAArC,QAAqDE,EAAKG,aAAaL,MACtFD,KAAM,CACJ,CACES,KAAM,cACNC,QAASL,GAEX,CACEM,SAAU,WACVD,QAAST,GAEX,CACEU,SAAU,iBACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAM,gBACNC,QAAST,GAEX,CACEQ,KAAM,sBACNC,QAASL,GAEX,CACEI,KAAM,WACNC,QAASR,IAEXW,OAAOb,KAKfJ,EAAIkB,aAAe,CACjBf,KAAM,KACNC,KAAM,GACNF,YAAa,GACbI,SAAU,IAGGN,O,yDCvFf,gFA6DemB,UAnDE,SAAC,GAAW,IAAVC,EAAU,EAAVA,KAETC,GADWD,EAAKb,KAAKG,aACVU,EAAKE,kBAAkBC,MAAMC,KAAK,WAASC,GAAQ,IAAfC,EAAe,EAAfA,KACjD,OACA,0BACI,qBAAGC,KAAMD,EAAKE,OAAOC,MACpBJ,EADD,aACkBC,EAAKI,YAAYzB,MADnC,SACgDqB,EAAKI,YAAYC,KADjE,cACkFL,EAAKI,YAAYE,SADnG,UAMR,OACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAK3B,MAAM,iBAAiBH,YAAa+B,IAAO/B,cAChD,uBAAKgC,UAAU,cACX,yCACA,uBAAKA,UAAU,wBACX,yBAAIb","file":"component---src-pages-all-posts-tsx-a6c0aac7753e4703ad64.js","sourcesContent":["import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nexport interface SEOPropsType {\n  description: string;\n  lang: string;\n  meta: any[];\n  title: string;\n  keywords: string[];\n}\n\nfunction SEO(props: SEOPropsType) {\n  const { description, lang, meta, title, keywords } = props;\n\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description ?? site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={title === 'Home' ? site.siteMetadata.title : `%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n        {\n          name: `keywords`,\n          content: keywords,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n  keywords: [],\n};\n\nexport default SEO;\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport './styles/tags.scss';\nimport PostList from '../components/PostList';\nimport config from '../../config';\n\nconst AllPosts = ({data}) => {\n    const metaData = data.site.siteMetadata;\n    const mapTitle = data.allMarkdownRemark.edges.map( ({node}, index)=>{\n        return(\n        <li>\n            <a href={node.fields.slug}>\n            {index} - Title: {node.frontmatter.title} (tag:{node.frontmatter.tags}, category:{node.frontmatter.category})\n            </a>\n        </li>\n        );\n    })\n    return(\n        <Layout>\n            <SEO title=\"All Posts List\" description={config.description} />\n            <div className=\"index-wrap\">\n                <h1> All Posts </h1>\n                <div className=\"index-post-list-wrap\">\n                    <p>{mapTitle}</p>\n                </div>\n            </div>\n        </Layout>\n    );\n}\n\nexport const pageQuery = graphql`\n  query {\n    site{\n        siteMetadata{\n            title\n            siteUrl\n        }\n    }\n    allMarkdownRemark(filter: {frontmatter: {title: {ne: \"\"}}})  {\n        edges{\n            node{\n                frontmatter{\n                    title\n                    tags\n                    category\n                    titleImage\n                }\n                fields {\n                    slug\n                }\n            }\n\n        }\n    }\n  }\n`;\n\nexport default AllPosts;\n"],"sourceRoot":""}