{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n\n\n# 개츠비(Gatsby) 블로그에 댓글 기능을 달아주자.\n\n지금까지 개츠비(Gatsby)로 자신만의 블로그를 구축해 보았다.  Gatsby를 다운받아 커스터마이징하여 빌드(Build)하고, Github에 올려서 Git Page로 자신만의 블로그로 만들었다. 블로그 아이콘도 변경 해 주었다. \n\n그런데, **다시** 생각해 보자. 개츠비(Gatsby)는 정적 웹사이트 생성기(JAM Stack)이다. 이 말은, 정적 HTML로 만들어서 단순히 네트워크 스토리지와 같은 저장소에서 불러와서 웹브라우저로 보여주는 것만 한다는 이야기다. 일반적인 웹사이트처럼 정보를 받아서 데이터베이트(DB)에 저장하는 등의 사용자 정보를 받을 수 없다는 것이다. \n\n> 단순하게는, **이웃의 댓글**, **좋아요** 등의 피드백을 받을 수 없다는 것이다. \n\n\n\n최근 정정 사이트를 사용하는 곳이 많아짐에 따라서, 댓글 등의 방문자 피드백을 받는 댓글 추가 기능이 별도의 서비스로 운영되고 있다.  대표적으로 디스커스(Disqus), 라이브리(livere) 등이 있다. 최근에는 네이버에서 유사서비스를 플러그인으로 제공을 하는것으로 알려져 있으나, 범용성이 낮아서 대상에서 제외한다. \n\n여하튼, Gatsby에서는 Disqus에 대한 플러그인을 별도로 제공되고 있으며 유사 서비스중 가장 익숙하므로 Disqus가 무난하다 하겠다. 아래는 이번 글에서 목표로 하는 최종 아웃풋이다. 정적웹사이트 블로그에 Disus 댓글 기능을 추가하는 것이 목표이다. \n\n![image-20210531170006905](gatsbyBlog_5.assets/image-20210531170006905.png)\n\n---\n\n\n\n# 디스커스 (Disqus) 설정하기\n\n\n\n다음은 Disqus 공식 홈페이지 이다. 공식웹사이트에 접속하여 `GET STARTED` 를 눌러서 시작하자. \n\n- 공식 웹사이트 : https://disqus.com/\n\n- 공식 블로그 : https://blog.disqus.com/\n\n| Disqus 공식 웹사이트                                         | 처음에는 사이트 생성부터 진행한다.                           |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| ![img](gatsbyBlog_5.assets/YHQ_rY_RTP54qHMujFa5C-QYIZPSK40VYLMMDeG-rzDyOkMTW0d0zHPaIqEGOYfBoAcdyoYmh2CFP4kVDurk8LztDyx5SsjDEmNlfqB9wy1aROUu-zUHyhE_DuMNcmC6tisFA1Hj8No.png) | ![img](gatsbyBlog_5.assets/P83H33I6O7BQXn6cm8tLiQHR5QiOBzEMxVnC8hfd6qoZayXVqKsQny3cvg3Vpb6ltw3gyThCRzl5aB0lqhDvZJ4RiAWo28S7Eu3SWbyxZWgfKuwgpjEEhUqB8u4N69UePkWQlSAHJpM.png) |\n\n> 구글, FACEBOOK 등 소셜 로그인이 가능하므로, 가입 과정은 생략한다. \n\n\n\n**GET STARTED** 를 누르면 2개의 메뉴가 나온다. 여기에서 처음 좀 당황했었다. 첫 메뉴는 그런가 보다 했는데, 두번째 메뉴에서 설치를 한다고 한다. **무슨 소리인가? 설치를 해야 한다고? 설마 로컬이나 웹서버에 뭔가를 설치해야하나?** 그것은 아니고, 우리가 이해하자면 `Configure`에 해당하는 것을 `Install` 로 표기를 해놨다. 놀라지 말자. \n\n두번째 메뉴 (install)을 선택하면, 웹사이트를 등록하는 화면이 나온다. 여기에서 가장 중요한것은 `Website Name` 이다. 여기 표기하는 name이 추후에 Disqus를 구분하는 `shortname`이 되므로 이 값은 고유한 값이어야 하며, 나중에 웹사이트에 적용하는 설정값에도 참조 되는 값이다. 나머지 정보는 대충 본인에 맞게 입력하면 된다.  \n\n> 참고로, 처음 메뉴는 이미 설정이 되어 있을 때 (기존 사용자)가 댓글을 확인하고 대응 하는 메뉴이다. 처음 가입/접속자는 2번째 메뉴로 들어가서, Disqus를 설정부터 해야 한다. \n\n\n\n| Get Started                                                  | Comment on Sites (첫번째 메뉴)                               |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| ![img](gatsbyBlog_5.assets/NIJjwgZYCWqdVcehSRPvr4xi4NaIhsHomP7J0k1QPENmqD2eZxrLP7yHJAG1h-6rQXIbwWDLEP-b3p23F22Fv1452a4ZlFEyD69w8UvvVEZth1tdD-R01ZAByaizmmfFdb5OLz2C2uw.png) | ![Disqus 첫번째 메뉴](gatsbyBlog_5.assets/JU-7WvxcCcxFJSgomrnjOOEi1fevN-oQQ_0qUKDZRW1QsCsirZNXUCU3FVe5Hd2fuwJkzcbJnPzAfnZxHrNoeBO310ZFhPbCGQsC53EnC0VRtqVPAVMHcWx9m5K89ymAHpYXKlDzLJE.png) |\n\n\n\n\n\n## Disqus 설정 (Install ?)\n\nDisqus 설정은 아래와 같은 절차를 필요로 한다. 어렵게 설명 되어 있지만 사실은 요금제를 설정하고 2번째 단계만 진행하면 된다. \n\n- Select Plan\n- Install Disqus\n- Configure Disqus\n- Setup Moderation\n\n\n\n### 1단계. Select Plan. \n\n일단, 무료 사용하면 된다. 가장 아래쪽에 별로로 마련되어 있다. 좀 더 고급사용자는 가격 정책에 맞게 사용을 선택하면 된다. \n\n|                                                              |      |\n| ------------------------------------------------------------ | ---- |\n| ![img](gatsbyBlog_5.assets/JLhuRvae-rbYGxxWgnRsF3h3AJA6u6NGQV4bNPXK2ZMz3wu9P1Is4WX1mJoYDzGLCLfUTc2mHWWx9uTvjB-_UO0-ArRCevaOhgBWmRG-3T7VYdftitsNQ05HFfcKYPCLVvlu43Ty6tc.png) |      |\n\n\n\n### 2단계. Install Disqus\n\n2단계는 다시 2개의 절차로 나뉜다. 1) 플랫폼 선택, 2) 실제적인 웹사이트 설정. \n\n여러가지 지원하는 플랫폼이 나오는데, 사실 이 플랫폼에 맞게 달라지는 것은 별로 없다. 플랫폼에 따라서 Disqus를 사용/설정하는 방법이 다른데, 그 가이드가 다를 뿐이다. 사실, 현재 사용하고 있는 블로그나 CMS를 잘 알고 있다면, 이미 설정하는 방법은 알 수도 있을 것이다. 아무튼, 우리는 현재 Gatsby로 블로그를 구성하였으나, Gatsby를 선택해 주도록 하자. \n\n![img](gatsbyBlog_5.assets/xGmkUgNt7qGLpYVmTtuGMzcjgvW18Ar-FrhOcCELtrwichnDIrSFDjMWNI-hwqmXdWhZf9_bc5Zro-f7xgnCbYsv_YSHodbUD4A9Ap3plpWnuTepXizmo-T8OzLLhmCzvEwtXpCm_Bg.png)\n\n\n\nGatsby를 선택해 주면, 이제 Gatsby에 Disqus를 어떻게 적용해야 하는지 설명하는 페이지가 출력 된다. Gatsby를 기준으로 다음과 같이 설치를 진행 한다. \n\n1) `Gatsby-plugin-disqus` 설치\n\n```bash\nnpm install --save gatsby-plugin-disqus\n```\n\n\n\n2) Gatsby-config.js에 plugin을 설정한다. (Gatsby에서 다른 플러그인을 설치하는 과정과 동일하다. ) 여기에 초기 웹사이트 등록 과정에서 입력한 `short name` 을 입력하여 준다. 이 과정이 가장 중요한 과정중 하나 이다. \n\n```javascript\n// gatsby-config.js\nmodule.exports = {\n    plugins: [\n        {\n            resolve: `gatsby-plugin-disqus`,\n            options: {\n                shortname: `your short name`\n            }\n        },\n    ]\n}\n```\n\n\n\n\n\n3) 실제 웹페이지 적용하기\n\n실제 웹페이지에 적용한다. Gatsby는 ReactJS를 기반으로 하기 때문에, Disqus React Componet를 import하여 사용하면 된다. 아래 공식 가이드에는 `Template` 를 새로 생성하는 것으로 되어 있지만, 기존 Template에 `<Disqus/>`  컴포넌트만 추가/삽입 해 주면 된다. 여기에서 가장 중요한 것은 페이지를 구분하는 `identifier` 이다. \n\n```javascript\nimport { Disqus } from 'gatsby-plugin-disqus';\n\nconst Template = () => (\n    /* Page contents */\n\n    <Disqus\n        config={\n            /* Replace PAGE_URL with your post's canonical URL variable */\n            url: 'PAGE_URL',\n            /* Replace PAGE_IDENTIFIER with your page's unique identifier variable */\n            identifier: 'PAGE_IDENTIFIER',\n            /* Replace PAGE_TITLE with the title of the page */\n            title: 'PAGE_TITLE',\n        }\n    />\n);\n```\n\n필자의 경우, `identifier`에  `slug` 값을 넣어 주었다. 어차피 `slug` 는 고유값이 아니면 에러가 발생한다. 또한 파일 생성단위도 slug 이므로 Gatsby를 사용한다면 slug 값을 id로 입력하면 되겠다. \n\n> 최근 많은 Theme에서 Disqus를 기본 탑재 하고 있다. 따라서, 일부 Theme는 `config.js` 등의 파일에 Disqus shortname을 표기하면 Disqus가 자동으로 동작하기도 한다. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","excerpt":"개츠비(Gatsby) 블로그에 댓글 기능을 달아주자. 지금까지 개츠비(Gatsby)로 자신만의 블로그를 구축해 보았다.  Gatsby를 다운받아 커스터마이징하여 빌드(Build)하고, Github에 올려서 Git Page…","fields":{"slug":"/gatsbyBlog_5/"},"frontmatter":{"date":"May 31, 2021","title":"블로그에 댓글기능 달아주기 (ft.Disqus 붙이기)","tags":["gatsby","blog","Disqus"],"update":"May 31, 2021"}}},{"node":{"rawMarkdownBody":"\n# 나만의 블로그. 다 좋은데....\n우여곡절로 우리는 자신만의 블로그를 만들었다. 단순히 블로그 플랫폼을 활용하는 것이 아니라, 본인 입맛에 맞게 수정할 수 있는 나만의 웹사이트 이다. 파일이나 테마도 마음데로 조절할 수 있다. 편의성 측면에서는 블로그 플랫폼을 사용하는 것이 당연히 편하지만, 이러한 체계를 구축하면서 배우는 것도 있고, 역량 향상에도 도움이 된다. 뭣하면, React로 전향하기도 쉽다.\n\n이러한 장점이 있긴 한데.. 소소한것 들이 없다. 채워줘야 한다. \n\n이번 포스팅에서 필요성을 느낀점은 바로 이거다. \n\n![img](gatsbyBlog_6.assets/QTTZyxmLp59ngDXuzmLYkcuGKJb1CL2qUSfGMbaDXbe_5HB-a2oFFX2WjD6QtE5lV77CHQ7zms6RDyLEENM1sRxm7KVykUZOyPc04d0e92mu9eobQb0MdjXubEob1k-faaS7gfIw5IY.png)\n\n\n\n당연하게 주어질 때는 그 존재성 자체로 잊고 있었던, 이것. **방문자 분석**\n\n\n\n\n\n# 방문자 분석 기능이 필요하다.\n\n\n\n단순하게는 방문자 추이 부터, `어떤 포스팅이 사람들에게 읽히고 있는가`에 대한 궁금증일 일지 않을 수 없다. 궁금증을 넘어서 사람들에게 읽히지 않는다는 것은 그것 자체로 문제가 있고, 고쳐야할 점이 아니겠는가? 그런데, 이미 거론한 바와 같이 Gatsby와 같은 정적웹사이트에는 데이터베이스가 없기 때문에 이러한 데이터를 관리할 수가 없다. \n\n> 물론, Git Page에서 대략적으로나마 볼 수 있긴 하지만, 아시다 시피 이것은 많이 부족하다. 방문자와 code commit 관련이 잘 구분되지 않으며, 어떤 페이지에 접근 했는지 분석이 불가능하다. \n\n> Netlify의 경우 Analytics 기능이 있으나, 월 9$ 비용을 요구한다. \n\n| Github Traffic                                               | Netlify Analytics ($9/month)                                 |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| ![Github 트래픽 분석. 사용자 분석으로는 부족한 점이 많다. Git Clone/Pull Request 추이가 목적이므로 사이트 방문자 분석에는 적합하지 않다. ](gatsbyBlog_6.assets/image-20210531212754271.png) | ![image-20210601133912860](gatsbyBlog_6.assets/image-20210601133912860.png) |\n\n\n\n위 그래프는 Github에서 제공하는 Traffic 분석에 대한 모니터링이다. 방문자와 소유자 정도는 구분이 가능하긴 하지만, 방문자 분석에는 부족한 부분이 많다. 그래서 그 전까지는 별로 신경을 쓰지 않았던 구글 애널리틱스를 절실히 필요하게 되었다. 역시, 해봐야 필요성을 느끼나 보다. 이래서 그렇게들 구글애널리틱스를 찾았나 보다.. (물론 마케팅측면에서 분석이 직접적인 영향이 크겠지만 말이다. )\n\n\n\n# 구글 애널리틱스(GA : Google Analytics)\n\n이러한 이유로, Gatsby로 만든 정적 웹사이트에 구글 애널리틱스(GA)를 추가 해 보았다. 우리의 웹사이트에 누군가 방문하면 구글 애널리틱스의 스크립트가 실행하여, Google Service에 방문자 트랜드, 접속하는 페이지, 접근경로, 접속 키워드, 경우에 따라서는 접속 지역 및 연령대 등 다양한 추가 분석이 가능해 질 것이다. \n\n필자는 전문적으로 마케팅 하는 것은 아니기 때문에, 접속 트랜드, 접속 페이지와 이에 따른 키워드 정도만 확보하는 것을 목적으로 하고 있다. \n\n다음은 구글 애널리틱스에 접속하면 볼 수 있는 Main Page이다. 도대체 어디에서 분석 대상 웹사이트를 추가로 등록하는지 알 수 가 없다. 한참 눌러보다가 보니, 왼쪽 가장 하단에 **설정 아이콘 (관리)**를 발견할 수 있었다. (보통 새 사이트 등록은 첫부분에 있어야 하지 않나? 하는 생각이 드는데 말이다.)\n\n> 구글 계정이 있다면, 애널리틱스는 바로 이용할 수 있다. 구글 계정 가입 과정은 생략한다. \n\n![image-20210531214511384](gatsbyBlog_6.assets/image-20210531214511384.png)\n\n\n\n\"관리\" 버튼을 누르면, 속성 만들기 - 속성 설정 (Property Setting) 페이지가 오픈된다. 속성이름에는 새로 추가하는 웹사이트를 구분할 구분 문자열을 입력해 준다. 그 밖에 시간대 설정 등 (고객 분석 등은 시간에 따라 다를 수 있으므로) 항목이 있는데, 본인 지역과 타겟군에 맞추어 입력해 주면 된다. 다음으로는 분석할 대상의 카테고리를 선택 해 준다. 웹/안드로이드앱/블로그의 카테고리가 있다. 본 포스팅에서는 블로그를 선택하여 진행하였다. \n\n| 속성 만들기                                                  | 데이터 수집 설정                                             |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| ![속성 만들기](gatsbyBlog_6.assets/-zSokl3O8auqA6hXQslgPQUZbkHGhtEvFb4rpuUSsscIfSkgL4vc3pH_Q126eu4NL21gzDm-kqp2VpU1NsjDVT0R5QWMskLrGA_6V0PSe39btCYsX_MkY33J8566l02J8HXbDnpYpF0.png) | ![데이터 스트림](gatsbyBlog_6.assets/r4NFh7B7jzZIxqNuqWST6gbcmclV0k78-doSqjtlDmYhavVhIAl_7xnKUKY5EEo6X5Gtas0Yyg8-cvAHLWffCBjDFeiYc1iS-LYZED-b1tJyj4ctPo2GRfNecKRSxTjZDip9EvqAMW8.png) |\n\n\n\n다음으로는, 데이터 스트림 설정이다. 데이터 스트림으라는 말이 좀 생소할 수 있는데, 데이터 관점에서 데이터소스라고 보는 것이 적절해 보인다. 여기에서 대상 사이트/블로그의 URL주소 값을 입력해 주고, 이름도 지정해 주자. 그 다음 스트림 만들기를 선택한다. \n\n![image-20210531214700285](gatsbyBlog_6.assets/image-20210531214700285.png)\n\n\n\n\n\n필자는 블로그의 URL을 입력하고, 스트림 이름은 My Tech Blog라고 입력하였다. 스트림 생성을 마치고 나면, 하단에 태그에 대한 가이드가 있다. \"새로운 온페이지 태그 추가\"를 눌러서 태그 적용 가이드를 살펴 보자. \n\n![image-20210531214753440](gatsbyBlog_6.assets/image-20210531214753440.png)\n\n\n\n다음은 \"새로운 온페이지 태그 추가\"를 눌렀을 때 제공되는 구글의 공식 스크립트 이다. \n\n> 기존 온페이지 태그 사용은 과거 버전이다. GA ID가 \"UA-xxxx\"로 되어 있는 코드들은 기존 태그를 사용한다. 필자는 새롭게 적용된 태그를 사용하였다. \n\n![image-20210531214849829](gatsbyBlog_6.assets/image-20210531214849829.png)\n\n이제 위에서 제공되는 태그만 자신의 웹사이트/블로그의 모든 페이지에 적용될 수 있도록 `<head>`  태그에 삽입해 주면 된다. \n\n\n\n# 구글애널리틱스 설정 하기\n\n우리는 지금까지 Gatsby를 사용한 정적웹사이트로 이야기를 이끌어 왔다. 따라서, GA 적용 스크립트를 Gatsby Layout 또는 Helmet에 적용하면 될 것이다. \n\n그런데, React 또는 Gatsby의 JSX에 저 스크립트를 바로 입력하면 다음과 같은 에러를 보게 될것이다. \n\n![img](gatsbyBlog_6.assets/bMH_EUfbu7SI_g54nhc3zE3IVVJlQo-QUb7cJ0TsSMCYemyp0TY7M_yM1BDvVHW9lFAec4MnIegZ4mfng_qYOaRWzn_shsAI-orSHkI6rQW5o1lm64QDAZmroW6MYIyiy1R8LMryzVw.png)\n\nJSX가 순수 Html 처럼 보이지만 사실은 그렇지 않기 때문에, JSX를 html로 생성하는 과정에서 WEBPACK이 에러를 발생한다. \n\nReact에서는 이렇게 순수 Html 입력을 위해서 `InnerHTML` 을 입력할 수 있는 기능을 별도 가지고 있다. 필자는 아래와 같이 GA 삽입용 Component를 별도로 만들어서 사용하고 있다. (아래는 Component를 만드는데 사용한 Typescript 이다. )\n\n```javascript\nimport * as React from 'react';\n\n\nexport interface GaProps {\n  ga_id: string;\n}\nconst Ga = (props: GaProps) => {\n  const { ga_id } = props;\n  const htmlContent =`\n  <script async src=\"https://www.googletagmanager.com/gtag/js?id=${ga_id}\"></script>\n  <script>\n    window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments);}\n    gtag('js', new Date());\n\n    gtag('config', '${ga_id}');\n  </script>\n  `;\n\n  return (\n      <div\n      id='GaContainer'\n      dangerouslySetInnerHTML={{__html:htmlContent}}\n      />\n  );\n};\n\nexport default Ga;\n\n```\n\nGa Compoent를 생성하였다면, 실제 파일에 다음과 같이 적용하였다. 유의할 점은 `<Helmet>` 태그 내부에 하지않고, Html에의 Body 부분에 생성하였다는 점이다. 이것은 `Ga Componet` 를 생성할 때 `<div>` 태그를 사용하였기 때문이다. \n\n```javascript\n...\nimport Ga from '../GA';\n...\n\n return (\n    <>\n      <Helmet>\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" />\n        <link rel=\"icon\" href=\"favicon.ico\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"favicon.ico\" sizes=\"16x16\" />\n        <meta name=\"google-site-verification\" content={config.googleSearchConsole ?? ''} />\n      </Helmet>\n\n\t\t  <div id=\"layout\">\n\t\t\t<Ga ga_id={config.googleAnalytics ?? ''} />\n        ...\n      \t...\n      </div>\n  \n```\n\n\n\n구글 애널리틱스의 화면에서 실시간 사용자에 숫자가 증가 하는 것을 확인 하면, 최종 확인된 것이다. GA적용 후 바로 커밋하고 접속하면 자신이 접속한 이력이 카운트 되어서 기존 `0`에서 숫자 `1`로 변경됨을 확인하자. \n\n![image-20210531215628535](gatsbyBlog_6.assets/image-20210531215628535.png)\n\n\n","excerpt":"…","fields":{"slug":"/gatsbyBlog_6/"},"frontmatter":{"date":"May 31, 2021","title":"블로그에 사용자 분석기능을 달자 (ft. GoogleAnalytics)","tags":["gatsby","blog","GoogleAnalytics"],"update":"May 31, 2021"}}},{"node":{"rawMarkdownBody":"\n\n\n# 자신만의 블로그/웹사이트에 아이콘을 입히자.\n\n네이버, 티스토리 등 블로그 플랫폼을 이용하지 않고 자신만의 블로그와 웹사이트를 만들기 시작했다면, 이제 차츰 부족함을 느끼기 시작할 것이다. 우리가 블로그 플랫폼에서 제공하는 다양한 서비스를 알게 모르게 누리고 있었다는 사실을 인지한다. 처음에는 별거 아니게 생각했던것들이 눈에 거슬리기 시작한다. \n\n가장 처음 눈에 들어온 것은 아이콘이다. 이쁘지는 않더라도, 저렇게 비활성화 된듯하게 보이는 아이콘은 좀 아니지라는 생각이 든다. \n\n![image-20210531110247169](makeFavicon.assets/image-20210531110247169.png)\n\n이쁘게 만드는 일은 시간이 될 때 조금씩 하면 될것이고, 일단은 구색부터 갖추자.\n\n\n\n\n\n# 파비콘(Favicon) 이란?\n\n파비콘은 웹사이트를 대표하는 아이콘 이미지로써, 웹브라우저를 열었을 때 탭위에 표기되는 아이콘 이미지라고 생각하면 된다. \n\n아래와 같은 이미지 들이다. \n\n![image-20210531123313092](makeFavicon.assets/image-20210531123313092.png)\n\n웹사이트의 `<head>` 에 다음과 같은 `link` 선언하여 사용할 수 있다. \n\n```html\n<link rel=\"shortcut icon\" href=\"http://mysite.com/myicon.ico\"/>\n```\n\n또는 다음처럼 상대주소도 가능한다. \n\n```html\n<link rel=\"shortcut icon\" href=\"/myicon.ico\"/>\n```\n\n\n\n# 아이콘(Icon) 준비\n\n파비콘(Favicon)이 무엇인지, 어떻게 사용할지 알아보았으니, 이제 실제 재료(아이콘)을 준비할 차례이다. 이미 아이콘이 있거나, 포토샵 등으로 만들어 놓은 아이콘이 있다면 다음 Section으로 건너 뛰면 된다. \n\n만약, 저와 같이 디자인에 취약한 사용자라면, 다음 웹사이트를 이용해서 대충이라도 아이콘을 만들어 보기를 권한다. (포토샵, 일러스트레이터 등 이미지 편집툴이 있으면 그냥 사용하면 된다. )\n\n\n\n## 웹 이미지 에디터 \n\n과거에는 포토샵을 많이 사용했었다. 학교/기관 라이선스 등이 있어서 쉽게 사용했는데, 요즈음은 기관 라이선스 받은 것들도 없고 포토샵을 사용해 본지 10년이 다 되어 가는것 같다. 그래도 과거 사용한 포토샵 스타일이 이미지 편집에 손에 익어서 편하다. \n\n이러한 포토샵의 UI와 상당히 비슷하게 만들어 놓은 웹이미지 에디터가 있어서 소개 한다. 웹사이트에서 동작하기 때문에 별다른 설치가 필요없고, Layered 관리를 잘하기 때문에 타 웹이미지 에디터 대비 사용이 편한것 같다. \n\n- Pixlr Editor : https://pixlr.com/kr/\n\n웹사이트에 접속하면, PIXLR 에디터가 2종류가 있다. 1) 포토샵과 같은 Photo Editor, 2) 이미지를 생성을 위해 템플릿베이스로 구동되는 디자인에디터. 각각 특징이 있고 도움이 된다. \n\n이번 포스팅에서는 Photo Editor가 필요하다. Design Editor는 각자 한번 사용해 보기를 권한다. \n\n\n\n![웹이미지에디터 PIXLR](makeFavicon.assets/image-20210531110927968.png)\n\n\n\n| ![이미지에디터 E메뉴](makeFavicon.assets/image-20210531110808300.png) | ![디자인에디터 X메뉴](makeFavicon.assets/image-20210531111021948.png) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| PIXLR E : https://pixlr.com/kr/e/#editor                     | PIXLR X : https://pixlr.com/kr/x                             |\n\n이미지 에디터는 포토샵과 매우 유사하기 때문에 많은 사용자들이 익숙하게 사용할 수 있을 것이다. 필자의 경우, 대충 Gradient로 배경 색을 채우고, 도형 몇개 그린 다음 라운드를 주었다. 그리고 저장.. 약 5분 정도 걸린것 같다. \n\n\n\n우측 이미지는 템플릿 디자이너 (PIXLR X)화면이다. 여러가지 유형의 템플릿을 제공하기 때문에, 아주 빠르고 간단하게 뭔가를 만들어 볼 수 있다. 단점으로는 유료 기능이 많아서 사용에 제한이 되는 점이다. 트라이얼 버전을 제공하기 때문에, 잠시 사용해 보고 지속 사용여부는 그 때 가서 결정해도 되므로, 일단 무료 기능을 써보는 것으로... 쿨럭.!\n\n아래와 같은 템플릿들을 제공한다. 빠르게 무엇인가를 해볼 수 있을 것 같다.\n\n| ![image-20210531111153271](makeFavicon.assets/image-20210531111153271.png) | ![image-20210531111345396](makeFavicon.assets/image-20210531111345396.png) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n\n\n\n### 기타 디자인 에디터 (망고보드)\n\n용도가 다르긴 하지만, 웹 상에서 디자인/포스터를 만들 때 국내 서비스인 망고보드를 참조하기도 한다.  \n\n- 망고보드 : https://www.mangoboard.net/\n\n![망고보드-포스터를 만들때 유용하다](makeFavicon.assets/image-20210531125457887.png)\n\n\n\n### 아이콘 확보 완료\n\n어쨌든, 구색부터 갖추자. 필자는 아래와 같이 대충 5분만에 아이콘을 확보 했다. (진짜 큰 의미 없는 아이콘이다. 그냥 회색 아이콘만 지우려고 대충 그렸다. )\n\n![image-20210531110503698](makeFavicon.assets/image-20210531110503698.png)\n\n해당 이미지를 PNG 또는 JPG 등의 이미지 파일로 저장한다. 아이콘을 PNG자체로 사용할 수도 있지만, 범용성을 위해서 ICO파일로 만들어 주자. \n\n\n\n# 아이콘(Icon) 파일로 변환\n\nPNG 등의 이미지와는 다른 icon 파일로 변환 해야 주어야 한다. icon의 사이즈는 16x16, or 32x32이다. 구글에서 `favicon 생성`으로 검색하면 많은 사이트들이 보여지기 때문에 이중 하나를 선택해서 파일을 업로드 해서 변환 하면, 된다. 여기에서는 그중 예를 하나 들어 보겠다. \n\n> 추천 ICON 생성 사이트 \n\n- https://www.favicon-generator.org/ : 파비콘 전용\n- https://icoconvert.com/ : Favicon 뿐만 아니라 다양한 아이콘 생성\n\n\n\n다음은 각 사이트의 화면이다. 준비한 아이콘 파일(PNG, JPG)를 업로드하여 ICO파일로 변환하면 된다. \n\n| 파비콘 제너레이터                                            | 아이콘 컨버터                                                |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| ![파비콘 생서기](makeFavicon.assets/image-20210531125859457.png) | ![아이콘 컨버터](makeFavicon.assets/image-20210531112225688.png) |\n\n이 글에서는 파비콘 제너레이터를 따라가는 것으로 포스팅 한다. 파이콘에 최적화 되어서 여러 아이콘을 생성하고, 적용하는 테그에 대한 가이드도 함께 제공한다. (사실 어느 사이트를 이용해도 동일하다. ) 다음은 해당 사이트에서 변환후 다운로드한 파일들이다. \n\n![image-20210531110432177](makeFavicon.assets/image-20210531110432177.png)\n\n\n\n# 파비콘(Favicon) 적용 하기\n\n자. 이제 자신의 웹사이트의  <Head> 태그 안에 아래 내용을 추가해 주면, 파비콘 적용이 완료 된다. \n\n```html\n<link rel=\"shortcut icon\" href=\"favicon.ico\">\n<link rel=\"icon\" href=\"favicon.ico\">\n```\n\n> `shortcut icon` 과 `icon`  두개를 삽입한 이유는 브라우저별로 참조하는 키워드가 다르기 때문이다. \n\n```html\n<link rel=\"icon\" type=\"image/png\" href=\"favicon.ico\" sizes=\"16x16\" />\n```\n\n경우에 따라서는, 위 코드처럼 사이즈를 명시하는 경우도 있다. \n\n\n\n## Gatsby\n\n일반적인 웹사이트/블로그의 경우, `favicon.ico` 파일을 `/public`에 넣어 주면 된다. 그러나, Gatsby를 사용하는 경우에 테마(Theme) 또는 플러그인(Plugins)에 의하여 이러한 환경이 변화되어 있을 경우도 있다. 따라서, Gatsby의 경우에는 다음과 같은 액션을 추가로 진행할 필요가 있다. \n\n### `/static` 폴더에 `favicon.ico` 파일 복사하기\n기본적으로, Gatsby는 `./public` 폴더를 build할 때마다 다시 생성한다. 따라서, `/public` 폴더에 직접 복사해 두어도 어차피 삭제 된다. 이러한 용도로 사용하는 `/static` 폴더에 복사해 두면 된다. \n\n### `/src/images` 폴더에 ico 변경\n`/src/images`에 가보면, `icon.png` 파일이 있을 것이다. 이 파일을 favicon 생성할 때 사용한 png파일로 교체한다. gatsby가 build할 때 이 파일로 다양한 사이즈의 아이콘을 자동 생성해 준다.\n\n### html link tag 추가하기 \nGatsby의 대부분의 테마에서는 이미 `<Helmet/>` 컴포넌트를 통해서 이러한 부분을 관리하고 있을 것이다. `<Helme>` 컴포넌트가 정의된 부분의 파일에 가서 다음을 추가한다. \n```react\n<Helmet>\n        <link rel=\"shortcut icon\" href=\"favicon.ico\" />\n        <link rel=\"icon\" href=\"favicon.ico\" />\n        <link rel=\"icon\" type=\"image/png\" href=\"favicon.ico\" sizes=\"16x16\" />\n        .... 기타 다른 메타테그 ....\n      </Helmet>\n```\n\n\n\n> 브라우저에서 테스트 할 때, 브라우저에서 과거에 이미 캐시한 icon파일을 사용합니다. 따라서, icon을 변경했는데도 화면이 변하지 않는다면, 캐시를 비우고 다시 해 보시기 바랍니다. \n\n### Chrome Browser\n\n![image-20210531122131654](makeFavicon.assets/image-20210531122131654.png)\n\n### Firefox\n\n![image-20210531122045327](makeFavicon.assets/image-20210531122045327.png)\n\n","excerpt":"…","fields":{"slug":"/gatsbyBlog_4/"},"frontmatter":{"date":"May 30, 2021","title":"웹사이트 아이콘 (Favicon) 만들기","tags":["Blog","Gatsby"],"update":"May 30, 2021"}}},{"node":{"rawMarkdownBody":"\n# Online Jupyter Notebook for Python\n\n\n\n\n\n## Google Colab vs. MS Azure Notebook vs. Binder\n\n\n\nOnline 환경에서 데이터 분석을 진행할 수 있는 대표적인 플랫폼을 비교/평가 해 보았다. \n\n\n\n1) Google Colab\n\n2) MS Azure Notebook\n\n3) Binder\n\n\n\n다양한 측면에서 비교를 할 수 있지만, 진정으로 크리티컬한 부분에서 놓칠 수 없는 비교점이 있다. \n\n\n\n\n\n\n\n## Google Colab\n\n\n\n제공되는 리소스는 ```2 CPU, 12G Mem 할당``` 으로 상당히 준수하다. 게다가 GPU를 제공해 주고 있어서, GPU 모드로 ML 연산을 계산할 수 있다. \n\n\n\nGoogle Colab에서 제공하는 리소스 스펙\n\nCPU 스펙\n\n```python\n!cat /proc/cpuinfo\n```\n\n```python\nprocessor\t: 0\nvendor_id\t: GenuineIntel\ncpu family\t: 6\nmodel\t\t: 79\nmodel name\t: Intel(R) Xeon(R) CPU @ 2.20GHz\nstepping\t: 0\nmicrocode\t: 0x1\ncpu MHz\t\t: 2200.000\ncache size\t: 56320 KB\n```\n\nMemory 스펙\n\n```python\n!free -h\n```\n\n```python\n              total        used        free      shared  buff/cache   available\nMem:            12G        3.0G        7.4G        908K        2.3G         11G\nSwap:            0B          0B          0B\n```\n\n\n\n\n\n\n\n### 장점\n\n웹환경에서 실행하여줌에도 불구하고, GPU를 지원해줌\n\nML을 구동시키기에 적당함\n\n\n\n### 단점\n\nUI가 몹시 레거시함\n\n\n\n\n\n![image-20200515152247703](/Users/audit01/Library/Application Support/typora-user-images/image-20200515152247703.png)\n\n개인차이가 있을 수 있겠으나, UI 좀 덜 아름답다. 뭔가 과거의 파워빌더(PowerBuilder)를 보는 느낌이랄까?\n\n\n\n![img](https://k.kakaocdn.net/dn/ca9bkW/btqEcnRjWTI/KRiP5gdMZI9ILBK8KEBDF0/img.png)\n\n실행할 때 마다 차이가 존재한다. 2~3번째 실행 할 때는 1.83초\n\n\n\n\n\n## Microsoft Azure Notebook\n\n\n\nMS Azure Notebook의 제공되는 리소스의 스펙\n\n```python\n!cat /proc/cpuinfo\n```\n\n```python\nprocessor\t: 0\nvendor_id\t: GenuineIntel\ncpu family\t: 6\nmodel\t\t: 79\nmodel name\t: Intel(R) Xeon(R) CPU E5-2673 v4 @ 2.30GHz\nstepping\t: 1\nmicrocode\t: 0xffffffff\ncpu MHz\t\t: 2294.689\ncache size\t: 51200 KB\n```\n\n\n\n```python\n!free -h\n```\n\n```python\n              total        used        free      shared  buff/cache   available\nMem:           3.8G        568M        3.1G         17M        198M        3.0G\nSwap:            0B          0B          0B\n```\n\n\n\n\n\n\n\n### 장점\n\nUI 측면에서 Jupiter Notebook 그대로를 사용하고 익숙할 뿐만아니라, UI의 편의성과 활용성이 더욱 사용하기 좋음\n\nPython 버전별로 커널을 생성하기에 편리하며, Python 외 R 등 환경도 잘 디플로이 되어 있음\n\n다양한 강좌들을 포함하고 있어서, 공부하는데 많은 도움이 됨\n\n\n\n### 단점\n\n파일 접근 할 때 속도가 많이 느림.\n\n\n\n\n\n\n\n\n\n![img](https://k.kakaocdn.net/dn/eqquwR/btqEdw7BsC4/0FUvpp7iezQhnC2p6ejoRK/img.png)\n\n두번째 및 3번째 실행 시 15.37초\n\n\n\n\n\n\n\n## Binder\n\n\n\n\n\n자체적으로 notebook을 작성하여 사용하는 방식이 아닌, GitHub에 있는 Repository를 가져와 서 실행 시켜주는 방식이다. \n\n\n\n\n\n![img](https://mybinder.org/static/logo.svg?v=f9f0d927b67cc9dc99d788c822ca21c0)\n\n\n\n![image-20200515153550284](/Users/audit01/Library/Application Support/typora-user-images/image-20200515153550284.png)\n\n\n\n\n\n\n\n\n\n```python\n!cat /proc/cpuinfo\n```\n\n```python\nprocessor\t: 71\nvendor_id\t: GenuineIntel\ncpu family\t: 6\nmodel\t\t: 85\nmodel name\t: Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz\nstepping\t: 4\nmicrocode\t: 0x2000064\ncpu MHz\t\t: 1000.027\ncache size\t: 25344 KB\n```\n\n\n\n\n\n\n\nMemory 스펙\n\n```python\n!free -h\n```\n\n```python\n              total        used        free      shared  buff/cache   available\nMem:           754G         52G        101G         15M        600G        705G\nSwap:            0B          0B          0B\n```\n\n\n\n\n\n\n\n## GitPod\n\n\n\n\n\n\n\n\n\n\n\n\n\nCPU 스펙\n\n```python\n!cat /proc/cpuinfo\n```\n\n```python\nprocessor       : 15\nvendor_id       : GenuineIntel\ncpu family      : 6\nmodel           : 79\nmodel name      : Intel(R) Xeon(R) CPU @ 2.20GHz\nstepping        : 0\nmicrocode       : 0x1\ncpu MHz         : 2200.000\ncache size      : 56320 KB\n```\n\nM\n\n\n\nMemory 스펙\n\n```python\n!free -h\n```\n\n```python\n              total        used        free      shared  buff/cache   available\nMem:           58Gi       8.3Gi        23Gi       4.0Mi        27Gi        51Gi\nSwap:            0B          0B          0B\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","excerpt":"Online Jupyter Notebook for Python Google Colab vs. MS Azure Notebook vs. Binder Online 환경에서 데이터 분석을 진행할 수 있는 대표적인 플랫폼을 비교/평가 해 보았다.  Google…","fields":{"slug":"/Online Jupyter Notebook for Python/"},"frontmatter":{"date":"May 29, 2021","title":"Online Jupyter Notebook for Python","tags":["jupyter notebook","python"],"update":"May 29, 2021"}}},{"node":{"rawMarkdownBody":"\n\n\n# 2장. 개츠비 (Gatsby)로 블로그 구축하기\n\n\n\n# ## 기본 개발환경 설치 \n\n이전 포스팅에 JAM Stack과 정정 웹사이트 생성기 (SSG: Static Site Generator)의 개념을 소개 하였다. 이번 포스팅에서는 대표적인 SSG인 Gatsby를 설치하여 개인 블로그 구축에 기본적인 틀을 만들어 보도록 하자. \n\nGatsby는 Nodejs/ReactJS를 기반으로 한다. 따라서, 우선 Node 환경이 구성되어 있어야 한다. 기본적인 환경 구성은 다음과 같으므로, 이미 개발환경이 구성되어 있다면, 아래 내용은 건너 뛰어도 무방하낟. \n\n1) NodeJS 설치\n\n2) Git 설치\n\n3) Gatsby 설치\n\n각자 환경에 맞게 NodeJS와 Git을 설치해 주자. 그 다음 Gatsby 설치환경은 NPM 환경으로 동일하다. \n\n> 참고로, 필자의 환경은 Mac OS이므로, Window/Linux 환경은 소폭 다를 수 있다. \n\n\n\n### Mac OS 환경\n\n- NodeJS 설치\n\n```bash\nbrew install node\n```\n\n- Git 설치\n\n```bash\nbrew install git\n```\n\n\n\n### Windows 환경 \n\n다음 Nodejs.org에서 설치파일을 다운로드 받아 설치한다. \n\n- Nodejs : https://nodejs.org/en/download/\n\n- Git 설치 : https://github.com/git-for-windows/git/releases/tag/v2.31.1.windows.1\n\n\n\n### Linux 환경\n\n- NodeJS설치\n\n```bash\nsudo apt-get install curl\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash\n```\n\n- Git 설치\n\n```bash\nsudo apt-get update\nsudo apt-get install git\n```\n\n\n\n### 그 밖에 통합 개발환경 (IDE) 및 Editor 설치\n\n필자는 Visual Studio Code (VS Code)를 사용중이다. 그러나, Atom, Eclipse, IntelliJ 등 자유롭게 설치하여 사용하면 된다. 특별히 제한 사항이 없다.  \n\n> Visual Studio Code Download : https://code.visualstudio.com/download\n\n\n\n\n\n### Gatsby 설치 (환경 공통)\n\n1) Gatsby CLI 설치\n\n```bash\nnpm install -g gatsby-cli\n```\n\n이제 개발 환경 구성은 갖추었다. 이제, 실제 프로젝트 폴더로 이동하여 기본 프로젝트를 생성하도록 하자. 프로젝트를 생성할 폴더에서 다음과 같이 실행한다. \n\n2) Gatsby Project 생성\n\nGatsby Project 생성에 대한 유형은 다음과 같다. \n\n```\ngatsby new [SITE_DIRECTORY_NAME] [URL_OF_STARTER_GITHUB_REPO]\n```\n\n만약, `myblog` 라는 이름의 새 프로젝트를 시작한다면 다음과 같이 입력하여 생성할 수 있다. \n\n```bash\ngatsby new myblog https://github.com/gatsbyjs/gatsby-starter-hello-world\n```\n> 템플릿 원형이 되는 Github Repository를 입력하지 않으면 암시적으로 다음을 원형으로 인지한다.  https://github.com/gatsbyjs/gatsby-starter-default.git\n\n\n\n3) Gatsby 개발 서버 구동\n\n```bash\ncd myblog\ngatsby develop\n```\n\nGatsby로 기본 웹사이트를 생성하였다면, 프로젝트 폴더 안으로 들어가서 파일을 구경해 보자. 다음과 같은 기본 구성 파일과 폴더들이 생성 되어 있을 것이다. \n\n![image-20210601191738200](gatsbyBlog_2.assets/image-20210601191738200.png)\n\n> 템플릿에 따라서는 좀 더 다양한 구성요소들이 포함되어 있을 수 있다. \n\n시범 구동을 위해서 `develop` 환경을 실행해보도록 하자. \n\n\n\n4) Gatby 개발 웹사이트 접속 확인\n\n`gatsby develop`을 실행하면, 2개의 서비스에 접속할 수 있다. \n\n- 웹사이트 : http://localhost:8000/\n- GraphQL 테스트 :  http://localhost:8000/___graphql\n\n| 웹사이트 실행 결과                                           | GraphQL 테스트                                               |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| ![image-20210601192217969](gatsbyBlog_2.assets/image-20210601192217969.png) | ![image-20210601192239663](gatsbyBlog_2.assets/image-20210601192239663.png) |\n\n\n\n이제 기본적인 Gatsby 사이트 구성을 완료하였다. \n\n\n\n# Gatsby Theme\n\n우리는 이제 막 Gatsby Hello World를 구동해 봤을 뿐이다. Gatsby를 이용한 사이트를 구축하기 위해서는, ReactJS를 기반으로 Gatsby가 어떻게 프레임워크를 구성해 두었는지 시간을 두고 차근차근 알아갈 필요가 있다. \n\n다만, 우리의 목적은 개인블로그를 작성하기 위함이었다는 것을 잊지 말자. 자칫 목적을 상실하고 Gatsby 학습하는 동안 우리의 블로그 구축은 계속 지연될 수 있다. 일단, 단순하게라도 구축해 놓고 하나씩 업데이트 해 나가는 것이 좋을 듯 하다. \n\n이러한 관점에서, Gatsby는 다양한 테마를 제공하고 있다. Gatsby는 다양한 플러그인이 존재하는데 이런 플러그인의 사용과 파일구조, 디자인을 한데 묶어서 테마로 제공하고 있다. 수많은 공식 테마와 개발자들이 공유하는 비공식 테마가 있으나, 이번 포스팅에서는 Gatsby 공식 블로그 테마 (The Gatsby Blog theme)를 적용해 본다. \n\n## The Gatsby Blog theme 설치\n\n다양한 테마 덕분에 Gatsby를 통한 생산성이 향상되고 있다. 테마가 없었다면 아마도 Gatsby가 이렇게까지 유용하지는 않았을 지도 모른다. \n\n블로그 테마는, 마크다운(`md파일` 또는 `mdx파일`)로 작성된 문서를 디자인된 웹페이지로 변경해 준다. 따라서, 사용자는 정해진 위치에 마크다운 파일을 작성/추가함으로써, 자신만의 개인 블로그를 사용할 수 있다. 또한, 약간은 수정만으로 디자인과 기능을 변경하는 것이 가능하다. \n\n> 기본환경에서 마크다운 파일을 사용하기 위해서는, `gatsby-transformer-remark` 등의 플러그인을 설치/개발하여야 한다. 그러나 테마에서는 이러한 과정을 포함하여 잘짜여진 구조로 제공한다. \n\n\n\n### 1-1. 새로운 프로젝트 생성으로 시작할 때\n\n```bash\ngatsby new my-themed-blog https://github.com/gatsbyjs/gatsby-starter-blog-theme\n```\n\n\n\n### 1-2. 기존 프로젝트에 추가 반영할 때\n\n```bash\nnpm install gatsby-theme-blog\n```\n\ngatsby-config.js 파일에서 다음과 같이 플러그인을 추가 한다. \n\n```javascript\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-theme-blog`,\n      options: {\n        // basePath defaults to `/`\n        basePath: `/blog`,\n      },\n    },\n  ],\n}\n```\n\n\n\n### 2. 블로그 포스팅 \n\n![Gatsby Blog Theme](gatsbyBlog_2.assets/Gatsby-Monogram.svg){ width=50% }\n\n- 포스팅 내용 : `/content/posts` 내에 신규 마크다운을 생성하여, 포맷에 맞게 글을 작성하면 새로운 블로그 포스팅이 가능하다. \n- 포스팅 이미지 : 포스팅 컨텐츠에서 사용하는 이미지는 `/content/assets` 에 넣고 사용할 수 있다. \n- 포스팅용 마크다운은 다음과 같은 형식에 따른다. (`---`으로 감싼 글머리를 `frontmatter`라고 부르며, 모든 포스팅은 frontmatter를 포함해야 한다. )\n\n```markdown\n---\ntitle: Hello World (example)\ndate: 2019-04-15\nimage: ./some-image.jpg\n---\n\nPosts should be written from here\n\n```\n\n마크다운 파일 하나 당 포스팅 하나가 생성된다고 보면 된다. 즉, 한번 세팅이 완료되면 이후 블로그 포스팅은 `md` 파일만 관리하면 된다. \n\n### 3. 웹사이트 설정\n\n글을 작성하는 이외에 우리의 블로그는 웹사이트중 하나이기 때문에, 사이트 이름, 설명, URL등 추가적인 정보의 입력이 필요하다. Gatsby Blog Theme에서는 이러한 설정을 `gatsby-config.js` 에서 일괄처리 할 수 있게 `siteMetadat` 필드를 제공하고 있다. 웹사이트 메타 정보들을 입력해 주도록 하자. 추후 검색엔진최적화(SEO: Search Engine Optimization)에도 사용이 된다. \n\n> 좀 더 상세하게는, `Gatsby-config.js` 파일을 다른 컴포넌트에서 import하고 변수로 사용한다. \n\n```javascript\n// gatsby-config.js\nmodule.exports = {\n  siteMetadata: {\n    // Used for the site title and SEO\n    title: `My Blog Title`,\n    // Used to provide alt text for your avatar\n    author: `My Name`,\n    // Used for SEO\n    description: `My site description...`,\n    // Used for resolving images in social cards\n    siteUrl: `https://example.com`,\n    // Used for social links in the root footer\n    social: [\n      {\n        name: `Twitter`,\n        url: `https://twitter.com/gatsbyjs`,\n      },\n      {\n        name: `GitHub`,\n        url: `https://github.com/gatsbyjs`,\n      },\n    ],\n  },\n}\n```\n\n\n\n### 기타 UI 설정\n\nGatsby-Blog-Theme에는 기타 플러그인에 대한 설정 변경을 통하여, Highlight 색상/테마를 변경하거나, UI를 변경하는 등 디자인 변경이 가능하다. 또한, 소스 자체를 커스터마이징 할 수 도 있다. 이러한 부분은 차차 채워나가면 되겠다. \n\n참고로, 다음은 Highlight를 지원하는 `prism`의 색상테마에 대한 설정 변경이다. `dracula` 프리셋으로 설정한 예이다. \n\n```\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-theme-blog`,\n      options: {\n        prismPreset: `dracula`,\n      },\n    },\n  ],\n}\n```\n\n\n\n## Github/Git Page로 웹사이트 게시 하기 \n\n이제 기본적인 블로그 구성은 갖추었다. 다음으로, Gatsby Blog Theme를 Build하고 Github/GitPage에 업로드 하여 실제 블로그 글을 게시하여 보자. \n\n**1) Github 가입 및 로그인**\nGithub는 가입/활동을 하고 계시는 분이 많으나, 없으시다면 이번 기회에 가입하는 것도 좋겠습니다. 가입 후 로그인 해 주세요. \n\n**2) Github Repository 생성**\nRepository 항목으로 가서 `Create Repository`버튼을 누룹니다. `Gatsby + Github`블로그를 위해서 Repository는 다음 2종으로 생각해 볼 수 있습니다. \n\n- 일반적인 CodeRepository : Gatsby Source Code 자체를 push 할 Repository.\n- **Git Page 용 Repository** : static site generator에 의하여 생성된 부분만을 업로드 하는 Repository.\n\n일반 Code Repository는 내부 CI/CD가 동작하는 파이프라인에 유용합니다. Github/Jekyll 조합을 사용하는 경우가 이 경우에 해당합니다. 우리는 Gatsby를 사용하기 때문에 이 조합은 사용하지 못합니다. 그러나, Netlify와 연동하면 사용할 수 있습니다. Netlify 연동하여 사용하는 방법은 추후 추가 포스팅 하겠습니다. \n\n이번 포스팅에서는 Git Page용 Repository를 생성하여 사용하겠습니다. Git Page용 Repository를 사용한다함은, Static File의 저장소로만 사용하겠다는 의미와 같습니다. 다시 이 이야기는, Github에 업로드되는 파일은 `소스파일 전체`가 아니라 `/public` 폴더만 업로드 한다는 이야기 입니다. (다음절에서 gh-pages 도구를 사용하면서 다시 다루겠습니다. )\n\n\n\n다음은 Github Repository 생성 화면입니다. `Repository name`을 지정하여 줍니다. repository name을 `{userid}.github.io`  으로 지정해 주면, github pages 로 동작합니다. ex) `sjwind/sjwind.github.io`. 웹브라우저에서 `https://{userid}.github.io/` 로 접속하면 `index.html` or `index.js`를 불러오게 되는 것입니다. \n\n> Default github page 이외에도, 일반 리파지토리를 만들고 github page로 설정을 변경할 수 있습니다. 설명의 흐름상 이부분은 생략합니다.  일반 리파지토리를 github page로 설정하여도 기능상으로는 동일하게 동작하지만, Gatsby가 static 파일을 생성할 때, URL상의 차이가 있습니다. 이 때문에 --pathPrefix 옵션을 조정해 주어야 합니다. 상세 내용은 다음글을 참조 바랍니다. https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/how-gatsby-works-with-github-pages/\n\n\n\n당연하게도, 공개여부는 `public`을 선택 해 줍니다. 그 자체로 웹서버 역할을 합니다. \n\n> code repository와 netlify 연동할 때는 private로도 진행 가능\n\n![image-20210601215139551](gatsbyBlog_2.assets/image-20210601215139551.png)\n\n> Github Page에 대한 상세 설명은 공식 사이트를 참조하기 바랍니다. https://pages.github.com/\n\n\n\n**3) GitHub CLI 설치**\n\n앞서 설명한 바와 같이, github page에는 `/public` 이하 내용만 업로드 되어야 합니다. 그러나, Git을 통해서 관리하는 대상은 Gatsby Code 전체 입니다. 매번 `/public` 이하만 따로 Commit & Push하는 것도 어려울 것입니다. 따라서, github에서는 gitpage 전용 툴(gh-pages)를 제공합니다. 다음 명령어로 gh-pages를 설치합니다. \n\n```bash\nnpm install gh-pages --save-dev\n```\n\n그 다음으로, `package.json` 의 스크립트 부분의 `deploy` 항목을 추가 또는 수정 합니다. `gh-pages -d public` 은 `/public` 이하 내용만을 github pages로 push 하라는 의미 입니다. \n\n```json\n{\n  \"scripts\": {\n       ...다른 옵션..\n    \"deploy\": \"gatsby build && gh-pages -d public\"\n  }\n}\n```\n\n이 것으로써, 이제 `npm run deploy` 또는  `gatsby deploy `\t를 실행하면 코드를 빌드(`/public` 이하 정적사이트 생성)하고, gh-pages를 이용하여 github page에 `/public` 대상만을 Commit & Push 하게 해줍니다. \n\n\n\n4) Gatsby Build 및 커밋\n\n이제, 블로그를 포스팅하는 구성은 완료 하였습니다. 이제 실제 포스팅을 작성하고 (`md` 파일을 만들고), git을 사용하여 commit & push를 해 줍니다. \n\n#### 최초 1회 : git 초기화 및 최초 커밋/푸쉬\n\n```bash\ngit init\ngit add . \ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/{userid}/{userid}.github.io.git\ngit push -u origin main\n```\n\n#### 포스팅 작성 후 커밋 \n\n```bash\ngit add . \ngit commit -m \"commit message ... \"\n```\n\n#### 배포\n\n배포는 전술한 바와 같이, `npm run deploy`를 실행해 줍니다. \n\n다음은 Github에 Push 된 리파지토리의 결과 (좌)와 GitHub pages를 웹브라우저로 출력한 결과이다. \n\n| Github 에 Push된 리파지토리 결과                             | github pages의 출력 결과                                     |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| ![github repository](gatsbyBlog_2.assets/image-20210601223613572.png) | ![github pages를 이용한 블로그 구축](gatsbyBlog_2.assets/image-20210601223756600.png) |\n\n\n\n> [중요] git으로 업로드 대상에서 제외하기 위해서는 `.gitignore` 파일로 대상을 관리해야 한다. \n\n```bash\n $ cat .gitignore\n \n.env\n.env.development\n.env.production\n.vscode\n\n# Project dependencies\n.cache\nnode_modules\nyarn-error.log\n\n# Build directory\n.DS_Store\npublic/\n```\n\n\n\n\n\n## Github Pages의 Custom Domain 설정\n\n개인 도메인을 사용하고자 하는 유저는 Github Pages에서 Custom Domain 설정을 할 수 있다. 자신이 이미 보유하고 있는 domain name을 해당 필드에 입력하면 된다. 물론, DNS에서도 해당 Github Pages에서 제공하는 Domain (ex. username.github.io) 로 CNAME 레코드를 등록해 주어야 한다. \n\n| Repository > Setting menu                                    | Pages menu                                                   | Custom Domain                                                |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| ![image-20210601224143935](gatsbyBlog_2.assets/image-20210601224143935.png) | ![image-20210601224231249](gatsbyBlog_2.assets/image-20210601224231249.png) | ![image-20210601224432942](gatsbyBlog_2.assets/image-20210601224432942.png) |\n\n다음과 같이 Custom Domain을 사용할 때, DNS 서버에서 설정도 변경해 주어야 한다. \n\n![img](gatsbyBlog_2.assets/DI_OFD2AvqsLZrkv912jwx0SDF7lSG6CevvR5BAZO1nn1WAnagH5qVYZ7gsPiEYqW4kupKqr8Ka_3ecJE0vy5EssF-kSzafGqnXXo3qNmaYLMdvFeuK47FzKBwAvVg4IFmyPgYpqalk.png)\n\n\n\n## Git Page Custom Domain 설정 이슈\n\nGithub Page와 Gatsby를 이용한 Blog를 운영할 때, 예상치 못한 현상들이 지속 발견 되고 있다. \n그 중에 하나가, commit 할 때마다 Custom Domain 설정이 바뀌는 것이다. 원래 다음과 같이 Github Pages에서 제공하는 Custom domain 설정 기능을 사용하고 있었다. \n\n![Github Custom Domain 설정](gatsbyBlog_2.assets/image-20210529153742543.png)\n\n그런데, Commit/Deploy를 할 때 마다 Custom domain 설정이 지워지는 현상이 발생 한다. \n인터넷을 검색해 보니, 이 것이 오랫동안 회자되던 문제 였나 보다. 특히나, Gatsby를 사용하는 사람들은 대다수가 겪는 문제인것 같다.\n\n![Github Pages의 Custom domain 초기화 문제](gatsbyBlog_2.assets/image-20210529154226572.png)\n\n 다행히 자동으로 적용하는 방법이 고안 되었다. 결론 부터 이야기 하면 CNAME 파일을 생성하여 추가 해 주면 된다. \n\n## CNAME\n\n우선, Custom domain 설정을 하면 Github Repository에 어떠한 변화가 있는지 살펴 봤다.Custom domain 정보를 변경하고, 저장을 눌러준다. 잠시 적용이 반영되기를 기다렸다가 변경사항 반영된것을 확인 하고 Repository로 돌아와서 확인 했더니, 오호~ 23초 전에 생성된 파일이 있다. \n\n![Custom Domain을 설정하면 내부적으로 CNAME파일을 생성해주는 식으로 동작한다.](gatsbyBlog_2.assets/image-20210529154340512.png)\n\n그렇다면, CNAME 파일을 추가해 주면 되겠군.\nCNAME 파일을 열어보면, 일반 DNS (nslookup talbe)에 포함되어 있는 정보가 들어가 있다. \n\n![CNAME 파일 내용](gatsbyBlog_2.assets/image-20210529154436179.png)\n\nDNS name과 Ip를 매핑하는 것은 아니라. 단순하게 Domain name만 들어가 있다. 이제 프로젝트 파일을 하나 새로 생성하고 다시 커밋을 해 보자. \n\n```bash\n \"deploy\": \"gatsby clean && gatsby build && gh-pages -b master -d public\"\n```\n\n그런데, 문제가 하나 있다. Deploy 할 때 github로 ./public은 매번 모두 삭제하고 다시 빌드한다는 것이다. 이 때문에, /public 위치에 CNAME을 생성해 두어도 원하는 바를 이룰 수 없다. CNAME을 매번 유지하는 것에 2가지 방법이 있다. \n\n\n\n## 1. Static 폴더 사용\n\n![static folder에 CNAME을 복사해 둔다.](gatsbyBlog_2.assets/image-20210529161022396.png)\n\n사실, 가장 단순한 방법이다. 고정된 정적 자원을 사용하는 폴더인 `static folder` 에 복사해 두고 사용하면 된다. `Deploy` 과정에서 삭제되는 부분은 `/public` 이며, `/static` 은 deploy 시점에 `/public` 으로 자동 복사해 주기 때문이다. \n\n> 동일한 관점에서 나중에 NAVER 웹마스터 도구 등에서 소유 확인을 위한 html 파일을 입력하도록 요구한다. 이 때 static 폴더에 해당 파일을 복사해 두면 된다. Adsense 에서 요구한 ads.txt 도 이 영역에서 관리하면 된다. \n\n![네이버 웹마스터 도구: 소유 확인/검증을 위한 파일 업로드](gatsbyBlog_2.assets/image-20210529161724471.png)\n\n\n\n## 2. Deploy 시점에 복사\n\n경우에 따라서는 Static 폴더 사용이 불가능한 경우도 존재한다. 따라서 두번째 방법으로는, deploy 할 때 build 후에 CNAME을 /public으로 복사하는 것으로 변경하는 방법이다. 아래 `cp CNAME`\t을 추가 해 주었다. \n\n```bash\n \"deploy\": \"gatsby clean && gatsby build && cp CNAME ./public && gh-pages -b master -d public\"\n```\n\n\n\n\n\n","excerpt":"2장. 개츠비 (Gatsby)로 블로그 구축하기 ## 기본 개발환경 설치 이전 포스팅에 JAM Stack과 정정 웹사이트 생성기 (SSG: Static Site Generator)의 개념을 소개 하였다. 이번 포스팅에서는 대표적인 SSG인 Gatsby…","fields":{"slug":"/gatsbyBlog_2/"},"frontmatter":{"date":"May 29, 2021","title":"개츠비(Gatsby) + Git Page로 자신만의 블로그 만들기","tags":["gatsby","blog"],"update":"May 29, 2021"}}},{"node":{"rawMarkdownBody":"\n![Gatsby Thumbnail Image](./images/gatsbyCover.png)\n\n> 검색엔진 등록에 대한 상세설명은 다음을 참조하기 바랍니다. \n> - [검색엔진 웹마스터 등록 과정 설명]: https://www.richwind.co.kr/114\n> -[네이버 서치어드바이저 활용 방법]: https://www.richwind.co.kr/114\n> -[검색엔진최적화 설명]: https://www.richwind.co.kr/108\n\n\n\n# 블로그 만들기 3\n\nGatsby Blog 만들기 3\n\n\n\n## 검색 엔진에 등록해 주자\n\n\n\n### Google Search Console\n\n필자의 경우, SNS 등으로 활동하지 않고 있어서 Google이 가장 많은 유입이 생성될 수 있는 경로이다. \n\n따라서, google Search Console에 가장 많은 신경을 써 주어야 한다. 소성추가 하면 사이트 URL을 추가 할 수 있다. \n\n![Google Search console 사이트 등록 및 추가](gatsbyBlog_3.assets/image-20210529163124564.png)\n\nSitemap이 잘 등록되어 있는지 확인 해 보는 것이 좋다. \n\n![google search console sitemaps](gatsbyBlog_3.assets/image-20210529163308078.png)\n\n\n\n### Naver Webmaster 도구\n\n\n\n현재 검색엔진이 내 블로그에 대하여 등록되어 있는 상태를 살펴 볼 수 있다. \n\n![image-20210529162757507](gatsbyBlog_3.assets/image-20210529162757507.png)\n\n이제 막 생성한 단계라서, 사이트 설명 및 Graph 설명이 부족하다고 표기 되어 있다. \n\n\n\n### Bing Webmaster Tool\n\n\n\n대박..! 오랜만에 Bing Webmaster Tools에 들어왔더니, 새롭게 등록하지 않고 Google Search Console에 등록되어 있는 것을 불러와서 사용할 수 있다고 한다. 마이크로소프트가 이런점은 정말 대단한것 같다. 검색엔진으로써 구글과 Bing은 상대가 되지 않는데, 이것을 인정하고 이용할 것은 이용한다. 이러한 점이 오히려 마이크로소프트를 신뢰하게 만드는 것 같다. (요즘 마이크로소프트가 바뀌고 있다. )\n\n![Bing Webmaster Tool](gatsbyBlog_3.assets/image-20210529163652186.png)\n\n![Google Search Console과 연동하여 사이트를 자동 등록 해 준다. ](gatsbyBlog_3.assets/image-20210529165743729.png)\n\nGoogle Search Console은 이미 등록 해 두었기 때문에, 그냥 불러 들여올 수 있다. 아래에서 진행할 사이트 인증 절차도 Google Search Console 인증으로 대체해 준다. 그러나, 필자는 추가적으로 변한것이 있는지 수작업으로 진행 해 보도록 하겠다. \n\n\n\n다음은 Bing 검색엔진의 사이트 추가 및 인증 화면 이다. \n\n![image-20210529164037487](gatsbyBlog_3.assets/image-20210529164037487.png)\n\n3가지 선택 사항이 있지만, XML 파일을 다운로드 받아서 메인 디렉터리에 카피해 두는 방법이 가장 편리하다. 파일을 다운로드 받아서, 블로그의 `/static` 위치에 카피해 두자. \n\n> 다운로드 받은 xml 파일은 다른 검색엔진과 마찬가지로, HASH값만을 포함하는 파일이다. \n\n![Bing 검색엔진 등록 완료](gatsbyBlog_3.assets/image-20210529165154222.png)\n\n등록하고난 다음 곧바로는 아직 검색엔진에 데이터가 수집되지 않았다. 따라서, 초기에는 다음과 같은 화면들을 자주 볼 수 있다. \n\n![image-20210529165356257](gatsbyBlog_3.assets/image-20210529165356257.png)\n\n그러나, Bing의 WebMaster Tool을 이용하면 검색엔진 최적화하는데 상당한 도움을 받을 수 있다. 마치 네이버 웹마스터 도구와 구글 에널리틱스를 조합해둔 것과 같은 기능을 경험 할 수 있다. 마이크로소프트가 이런건 참 잘하는 것 같다. \n\n\n\n![image-20210529170057753](gatsbyBlog_3.assets/image-20210529170057753.png)\n\n![키워드별 검색 및 노출 현황 분석 ](gatsbyBlog_3.assets/image-20210529170313271.png)\n\n백링크, 키워드 조사, SEO 보고서 등 검색엔진 입장에서 사이트를 평가하는 기준을 잘 제시해 주고 있다. 물론, Naver에서도 동일한 기능들을 제공하고 있으니, 양쪽을 참조하면 좀 더 최적화에 편의성을 가질 수 있겠다. \n\n![image-20210529165529111](gatsbyBlog_3.assets/image-20210529165529111.png)\n\n","excerpt":"Gatsby Thumbnail Image 검색엔진 등록에 대한 상세설명은 다음을 참조하기 바랍니다.  검색엔진 웹마스터 등록 과정 설명: https://www.richwind.co.kr/114\n-네이버 서치어드바이저 활용 방법: https://www…","fields":{"slug":"/gatsbyBlog_3/"},"frontmatter":{"date":"May 29, 2021","title":"gatsby 3","tags":["gatsby","blog"],"update":"May 29, 2021"}}},{"node":{"rawMarkdownBody":"\n\n\n\n\n[toc]\n\n\n\n\n\n\n\n# Python\n\n\n\n## Bash command execution\n\n\n\n다음은 파일명에서 \"CPU\"라는 문자열을 포함한 파일만을 출력하여 준다. \n\n```bash\n$ ls | grep CPU\n```\n\n어떠한 대용량 데이터가 특정조건에 따라 파일로 작게 나뉘어 있는 경우가 있는데, 특정 조건으로만 파일을 불러들여 처리하는 경우가 종종 발생한다. 실제로 필자는 CPU 관련한 데이터를 기록한 xml을 개별로 취급할 때 사용하였다. \n\n\n\n```bash\n~/my_dev/ai_secu2020/src\n$ ls ../data/NMS10_XMLs | grep CPU\nFW_12348573_125.57-N_CPU.xml\nFW_12348584_172.18-N_CPU.xml\n  ...\n```\n\n\n\n### sed 를 이용한 문자열 치환 \n\n필자는 데이터 전처리의 초기 단계에서 종종 bash command를 사용한다. 대표적으로 sed, cut, awk 등의 명령어가 있다. sed는 쉽고 빠르게 io만을 이용하여 문자열을 치환해 준다. 복잡하지 않은 단순 치환이라면 sed명령어는 매우 유용하다고 할 수 있다. 문자열을 취급하다보면, 개행문자(`\\n`) 등의 command 문자나, 빈칸 (White Space)제거 또는 주석(Commet) 제거 등이 자주 사용된다. \n\n\n\n파일명 등 bash 에서 취급하는 문자열의 처리에 유용할 뿐만 아니라, 실제 Contents 처리에도 유용하다. \n\n```bash\n$ cat sample.txt | sed 's/\\n//g'\n```\n\n> 개행문자(`\\n`)을 ''으로 치환한다. 즉, 개행문자를 삭제한다. \n\n\n\n만약 `Jupiter notebook` 또는 IPython을 사용한다면, `%`  또는 `!`을 사용하여 bash command를 실행할 수 있다. \n\n```python\n% cat sample.txt | sed 's/\\n//g'\n```\n\n\n\n다음과 같이 **Python** 으로 python을 직접 파일을 읽어서, 문자열을 처리하는 방법도 있으나, 데이터의 양이 많거나, 파일이 여러개인 경우 bash 명령어로 처리한다면 쉽게 동일 작업을 수행할 수 있다. \n\n```python\nprint(open('sample.txt', 'r').read().replace('#',''))\n```\n\n> sed를 사용하는 방법은 매우 간편할 뿐만 아니라, Bash 명령어를 사용하여 새롭게 치환된 파일을 생성하면, 실제 데이터를 처리하는 python 모듈의 메모리를 절약할 수 있다. \n\n\n\n물론 파이썬으로 처리하면, 하나의 py파일에서 일관되게 처리를 할 수 있는 장정도 있다. 그러나, 적용해야하는 파일이 다수개인 경우 역시나 bash 명령어가 편하다. \n\n```bash\nls | grep CPU | xargs sed 's/\\n//g'\n```\n\n> 현재 working directory 에 존재하는 파일중, 파일명에 CPU가 포함되어 있는 파일을 대상으로, 모든 개행문자를 제거한다. \n\n\n\n다음은 bash script의 for문을 활용하여, 모든 파일에 대하여 실행한 sed 결과를 새로운 파일(`modify-<기존파일명>`)에 저장한다. \n\n```bash\nfor filename in $(ls | grep CPU); do\n  sed 's/\\n//g' $filename > modify-$filename\ndone\n```\n\n\n\npython으로 관리하는 프로젝트에서 bash script까지 별도로 진행되기 때문에 관리의 불편함을 느낄 수도 있다. 이라한 경우, bash script의 관리가 불편하다면, bash script 파일을 하나 만들어 두고, script 파일의 실행만을 python으로 진행하면 된다. \n\n\n\n혹시, 이것도 관리가 번거롭다면, 다음과 같이 python 자체에서 bash script를 만들어 주고, 실행해 주면 된다. \n\n```python\nimport os\n\nstrDataPath = './data'\nstrScript =\"\"\"\n#!/bin/bash\ncd {}\nfor filename in $(ls | grep CPU); do\n   sed 's/\\n//g' $filename > modify-$filename\ndone\ncd -\n\"\"\".format(strDataPath, strMode)\nwith open('modifyScript.sh','wt') as fp:\n    fp.write(strScript)\n\nos.system('chmod +x modifyScript.sh')\nos.system('./modifyScript.sh')\n```\n\n> current directory 와 다른 path에서 작업을 하고 싶다면, cd <path>를 수행하여 directory를 변경하고, `cd -` 명령을 통해서 원래의 directory로 복귀할 수 있다. \n\nPython의 이슈는 아니지만, 주의할 사항으로 스크립트파일(ex. `script.sh`)을 생성하고 난 후 실행 권한 ( `+x`)을 부여해 주는 것을 간과하기 쉬우므로 유의하기 바란다. 스크립트 파일을 생성하고, 실행권한을 부여 후 `os.system()`함수로 실제 스크립트를 구동해 준다. \n\n\n\n### Python CMD/프로세스 실행\n\n\n\nPython에서 외부 프로세스 실행하는 방법은 크게 3가지 방법이 있다. \n\n#### os.system()\n\npython에서 shell 명령어를 실행하기에 가장 단순하고 편리한 방법은 system() 함수를 사용하는 방법이다. \n\n`os.system( '명령어' )` 형태로 실행할 수 있다. 간단한 스크립트를 실행하거나, 또다른 python을 구동할 때, 서비스를 구동 시킬 때 등 사용할 수 있다. 다음과 같은 예제를 들어 볼 수 있다. \n\n```python\nos.system('chmod +x test.sh')\n```\n\n그러나, os.system()은 실행 결과에 대한 실행여부만 반환해 준다. 정상 실행은 `0` , 비정상 실행은 `에러코드값`을 반환해 준다. 대표적으로, `ls` 명령어로 현재 디렉토리의 파일 리스트를 확인할 수 없다.  다음과 같이 실행은 할수 있다. \n\n```python\nos.system('ls')\n==> 결과값 : 0\n```\n\n> 실행은 해준다. 그러나 결과값을 확인 할 수 없다.\n>\n> Ipython 또는 jupyter notebook 사용자라면, magic command(`%명령어`)로 단순하게 실행도 가능하다. ex.  `%ls`\n\n\n\n#### os.popen()\n\n문제를 단순화 해서, python 내부에서는 어떻게 `ls 명령어`의 실행 결과를 확인하고, 결과값들을 저장할 수 있는가? `os.system()`은 결과값을 반환해 주지는 않기 때문에 다른 명령어가 필요하다. \n\n`os.popen()`함수는 결과값을 반환해 준다. 좀 더 자세하게, 결과값보다는 실행하는 handle 또는 file descriptor를 반환해 준다. 따라서, os.system()함수처럼 호출하는 즉시 실행되는 것보다는, 실행구문을 지정하고 이후 read를 할 때 실행되는 구조이다. 함수의 이름에서 추측할 수 있듯이 `open`계열의 함수 이다. 파일을 오픈하는 것과 동일하게 Process를 open하는 개념이다. linux 계열의 kernel은 모든 것을 file로 보듯이, fd(file descriptor)로서 process를 오픈/실행하는 것으로 생각해 볼 수있다. 어찌 보면, lazy execution과 비슷한 방식이라고도 할 수 있다. \n\n```python\ncmd = os.popen('ls')\nval = cmd.readlines()\n```\n\n> os.popen()을 실행하는 시점에 명령어가 수행되는 것은 아니다. 오히려 `cmd.readlines()` 시점에서 명령어가 실행된다. \n\n\n\n다음은 필자가 실제 사용하고 있는 코드중 일부를 발췌하였다. 파일 들중에서 `CPU` 문자열을 포함한 파일만을 선별하여 파일명을 얻어오는 과정이다.\n\n```python\nstrDataPath = '../data/NMS10_XMLs/'\nstrCmd = \"ls {} | grep CPU\".format(strDataPath)\nstrFile = [x.strip() for x in os.popen(strCmd).readlines()]\nprint(strFile)\n```\n\n\n\n#### subprocess 실행 방법\n\nos 모듈은 기본적으로 os에서 제공하는 기능을 사용하는 모듈이다. 좀 더 전문적으로 process자체를 다루기 위해서 `subprocess` 모듈을 제공하고 있다. 단순히 명령어를 실행해 준다는 개념보다는 process를 다루는 개념이며, 이중에서 process를 실행해서 결과를 받아오는 함수가 일부 포함되어 있는 것이다. 좀 더 하위 레벨에서 process와 thread 등을 다룰 때 사용할 수 있다. \n\n`os.system()`는 동일 process에서 명령을 수행 후 종료하지만, `subprocess` 에 포함된 함수는 새로운 child process를 생성하여 실행한다. (fork) . 따라서, process 실행에 대한 상세 argument 들을 제어할 수 있다. \n\n> 실행의 반환값은 CompletedProcess 개체이다. CompoletedProcess는 기본적으로 args, returncode, stdout, stderr를 포함하며, stdout과 stderr는 None을 기본값으로 한다. \n\n\n\n```python\nimport subprocess\nr = subprocess.run('ls')\nprint(r)\n```\n\n> 결과는 실행코드이다. 성공:0, 에러:1\n\n\n\n기본적으로 stdout, stderr는 capture하지 않는다. (capture_otput=False) stdout을 확인하기 위해서는 caputre=True로 변경해 준다.  다음을 실행해 보자.\n\n```python\nimport subprocess\nr = subprocess.run('ls', capture_output=True )\nprint(r)\nprint(r.stdout)\n```\n\n\nsubprocess는 low level function으로 실행결과가 bytes 라는 점에 유의가 필요하다. 이러한 이유로, `utf-8`의 bytes를 string으로 디코딩(decode)해줄 필요가 있다. 다음은 명령어 실행 결과로 얻은 최종 문자열의 리스트 이다. \n\n```python\nfileList = [x.decode('utf-8') for x in r.stdout.splitlines()]\n```\n\n\n\n바이트 (utf-8로 인코딩된 byte)를 문자열로 변환하는 과정은 다음은 참조하기 바란다. \n\n###### Byte to String\n\n```python\na = b'AAAA\\n'\nb = a.decode('utf-8')\nprint(a)\nprint(b)\n```\n\n\n\n#### IPython Magic Command\n\n외부 명령어 실행까지는 아니지만 shell command 명령어로 한정한다면, Ipython 의 매직 커맨드 (magic command)를 활용할 수 있다. 앞서 잠깐 언급했듯이 ipython 또는 jupyter notebook 환경에서는 몇몇 매직커맨드를 제공하고 있다. 이중에서 shell command 실행을 지원하는 기능이 포함되어 있다.  다음과 같이 png 이미지 파일 리스트를 바로 확인 할 수 있다.\n\n```python\n%ls | grep png\n```\n\n그러나 이와 같은 겨우, notebook의 cell에서 결과 확인은 가능하나, 여러개의 파일을 자동화 처리하기 위해서는 변수로 저장해야 한다. 이와 같은 경우 기본 매직커맨드 (`%`) 구문 대신 `!`를 사용하여 결과 같을 변수로 저장할 수 있다. \n\n```python\nr = !ls | grep png\nprint(r)\n```\n\n\n\n#### 기타 python os 모듈기능\n\n앞서 설명한 방법들은 외부 명령어 실행에 대한 범용적인 방법이다. 그러나, python의 os모듈에는 자주 사용하는 shell 명령어 들을 이미 함수로 제공하고 있다. listdir(), makedir(), chdir() 등이 대표적인 예라 할 수 있다. 다음 명령어 라인을 참조하기 바란다. \n\n```python\nos.listdir() # list dir\nos.makedirs() # make a dir\nos.rmdir()   # remove a dir\nos.rename()  # rename a old one to  a new one\n\nos.path\nos.path.exists( <파일 또는 디렉토리명> )  # check if it exists\nos.path.isdir()  # check if it is a directory\nos.path.isfile() # check if it is a file\nos.getcwd() # get current dir\nos.chdir()  # change dir\n```\n\n\n\n경우에 따라서는, python에서 외부 명령어를 실행할 때, 환경변수가 필요한 경우가 있다. `os.environ`은 환경변수를 설정을 지원한다. \n\n```python\nenv = os.environ\nenv['PATH']\npath2 = r'<add path dir>;' + env['PATH'] \nenv['PATH'] = path2\n```\n\n> 환경변수의 설정은 현재 open된 창에만 적용된다. (메모리에만 존재한다. )\n\n\n\n#### 응용\n\n##### 디렉토리 부재 시 디렉토리 생성\n\n개발을 진행하다 보면, 경우에 따라서 subdirectory를 사용하게 된다. 데이터를 참조하거나 저장할 때 sub-directory를 사용하는 경우도 많다. 로직의 흐름에 따라서 sub-directory가 존재하지 않는 경우도 발생하는데, 이런 경우 디렉토리 존재 여부를 확인하고 생성해 줄 필요가 있다. \n\n다음은 현재 디렉토리를 기준으로  `../dev/img` 디렉토리가 존재하는지 확인 후, 해당 디렉토리가 없다면 디렉토리를 생성한다. \n\n```python\n# path check and make dir\nstrPath = '../dev'\nrePath = \"{}/img\".format(strPath)\nif not os.path.exists(rePath ):\n    os.makedirs(rePath)\n```\n\n\n\n\n\n\n\n---\n\n\n\n## XML Parsing\n\n\n\n우선 xml 파싱하는 기본 구문부터 살펴 보자. \n\n```python\nimport xml.etree.ElementTree as eTree \n\nxmlTree = eTree.parse('./test.xml')\ndata = xmlTree.findall('./rra')\n\n```\n\n`xml.etree.ElementTree` 모듈에 있는 `parse`함수를 사용하면, xml을 손쉽게 로딩할 수 있다. Xml을 파싱하여 얻은 개체에서 find / findall 등의 명령어를 사용하여 하위 tag를 개체로 가져올 수 있다. 좀 더 상세한 내용을 알아보기 전에, 분석해야하는 샘플 xml의 구조를 확인하고 진행하도록 하자. \n\n\n\n파싱하고자 하는 XML의 파일 구조는 다음과 같은 구조를 가지고 있다. 데이터에 관련한 속성(property)를 가지고 있으며, 주요 데이터값은 `RRA-> Database -> row -> v` 에 데이터가 행으로 보유하고 있는 형식이다. \n\n```mermaid\ngraph LR\nclassDef dotOutline fill:#f96,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5, 5\nRRD --> version\nRRD --> step\nRRD --> lastUpdate\nRRD --> RRA:::dotOutline\n\nRRA --> cf\nRRA --> pdp_per_row\nRRA --> database:::dotOutline\n\ndatabase --> date\ndatabase --> time\ndatabase --> row:::dotOutline\nrow --> v :::dotOutline\n\n```\n\n다음은 파싱(Parsing) 하고자하는 실제 xml 파일의 일부를 발췌한 문서이다. \n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE rrd SYSTEM \"http://oss.oetiker.ch/rrdtool/rrdtool.dtd\">\n<!-- Round Robin Database Dump -->\n<rrd>\n\t<version>0003</version>\n\t<step>60</step> <!-- Seconds -->\n\t<lastupdate>1441253228</lastupdate> <!-- 2015-09-03 13:07:08 KST -->\n\t<!-- Round Robin Archives -->\n\t<rra>\n\t\t<cf>AVERAGE</cf>\n\t\t<pdp_per_row>1</pdp_per_row> <!-- 60 seconds -->\n\t\t<database>\n\t\t\t<date>2015-09-01 13:08:00</date><time>1441080480</time> <row><v>2.0000000000e+00</v></row>\n\t\t\t<date>2015-09-01 13:09:00</date><time>1441080540</time> <row><v>2.0000000000e+00</v></row>\n\t\t\t<date>2015-09-01 13:12:00</date><time>1441080720</time> <row><v>2.0000000000e+00</v></row>\n    </database>\n  </rra>\n</rrd>\n</\n```\n\n\n\n\n\n\n\n\n\n\n\n# test 01\n\n\n\n\n\n\n\n\n\n","excerpt":"toc Python Bash command execution 다음은 파일명에서 \"CPU…","fields":{"slug":"/python-EDA-001/"},"frontmatter":{"date":"May 29, 2021","title":"Python EDA","tags":["blog","python","markdown"],"update":"May 29, 2021"}}},{"node":{"rawMarkdownBody":"\n# 컴.알.못 와이프, 블로거로 키우기 - 초보 블로거 따라하기 스텝 바이 스텝\n\n\n\n### *필자의 와이프는 정말 최고수준의 <u>컴.알.못.</u>이다. 네이버 검색도 잘 못하고, 웹사이트도 북마크 해둔 것만 들어간다.*\n\n사실, 블로그와 컴.알.못은 아무런 관련이 없다. 오히려 IT와 컴퓨터를 모르는 사람이 더 감각 있다는 것이 필자의 느낀점이라고나 할까? ***컴.알.못.의 문제점은***, 블로그에 대한 초기 설정들, 서치콘솔 등록들, 그리고 블로그 작성할 때 에디터와 그림편집 등을 빠르게 할 수 없다는 게 문제 이긴 하다. 그러나, 이러한 부분은 개발자출신인 남편이 얼마든지 커버할 수 있다.  개인적인 느낌은 필자보다 와이프가 블로깅에 더욱 능력이 있을 것이라는 판단이다. (이 판단은 오산이라는 것을 나중에 알게 되었어 ㅜ_ㅜ)\n\n>  사실은 블로거로 키워서 내 대신에 일을 좀 시켜보려는 원대한 계획(?)이라고 할 수 있다. \n\n와이프의 블로그 시작과 함께, 집에서 사용하던 Windows 데스크탑 메인보드가 사망하였다. ㅜ_ㅜ 필자는 Windows 노트북1, 맥북프로 2대의 총 3대의 노트북이 있어서, 그중에 맥북프로1을 와이프에게 인계하려 했으나, 컴.알.못 와이프께서 맥북을 도저히 못사용하시겠다고 말씀하셨다.  이번달이 와이프 탄신일, 와이프의 블로깅 시작, 데스크탑 부재의 3가지 환경을 고려하여 `와.이.프. 전용 노트북`을 큰맘 먹고 하나 질러 주었다. \n\n> 데스크탑은 부재한 상황에서 노트북만 책상위에 굴러다니는 형국이다.\n\n어쨌든 이러한 이유로 와이프에게 반 강제적으로 **컴.알.못 와이프를 블로거**로 키우기로 하였다. 이 과정에서 당연히 알겠거니 하며 건너갔던 부분을 몇몇 발견하게 되었고, 비슷한 곤란을 겪는 사람들이 있을 것 같아서 진행과정을 기록해 보고자 한다. \n\n\n\n## STEP 1. 일단 블로그를 만든다. \n\n와이프 설득만 몇달 하다가 안되겠구나 싶어서, 강제적으로 블로그 계정 등록부터 시켰다. 다른것 고민할 것 없이 그냥 티스토리(Tistory) 계정을 만들어 주었다. 많은 분들이 비슷한 과정을 겪었을 테지만, 이름 정하는 것이 가장 어려웠다. 계정 이름 정하는 것이 제일 어렵더이다. `개구쟁이 아이`의 방해와 역경을 이겨내고, 동일한 계정/블로그 이름을 피해서, 맘에드는 것을 정하여 블로그 계정을 완성하는 (1 Page)를 넘어가는데 **첫째날** 이 지나가 버렸다. 벌써 힘이 빠진다.\n\n> 시작이 반이다. 일단 시작은 했다. 에효~\n>\n> 그래도 설득만 하던 시절을 생각하면 장족의 발전이다. \n\n\n\n## STEP 2. 일단 뭐라도 작성한다. \n\n계정 이름을 정하는데 1일차를 보내버리고, 2일차가 되었다. 일단 티스토리 기본 세팅을 알려주고, 다른 무엇보다도 글을 몇개 써보라고 가이드 해 주었다. 티스토리의 메뉴에 대해서 간략히 설명하고, 글을 작성하는 에디터를 간략히 설명해 주었다. \n\n> 무엇이라도 좋으니, 일기 같은 글이라도 써 봐~\n\n일반 워드나 아래한글을 작성해 보았으니, 뭐 일반 글작성 에디터는 익숙 할 텐데, 문제가 발생하는 포인트는 그림 부분이었다. 그림 스크린 캡쳐/수정/복사 및 붙여 넣기를 어려워 했다. 일단은 어려움을 겪어야 Needs가 충만해 지기 때문에 잠시 놔두었다. 그러다가 물어보는 점을 집중적으로 알려 주었다. \n\n##### 대표적인 질문과 답변은 아래와 같았다\n\n1. <u>**이미지 2개를 병렬로 배치 (2열)하는 법**</u>\n\n   (답변) 이미지를 세로로 2개 붙여 넣고, 아래에 있는 그림을 드래그&드랍으로 위쪽 이미지의 바로 오른쪽으로 끌어다 놓으면, `빨강색 세로줄 가이드라인` 이 생김. 그 때 놓으면 자동으로 2열 배치됨 \n\n2. **<u>이미지 자르기 및 간략 수정, 이미지 위에 글씨 덧쓰는 방법 : 그림판 쓰면 되는거야?</u>**\n   (답변 1) 일단 그림판 써봐.. ^^;;; (한 두개 이미지 편집 후)\n   (답변 2) 많이들 사용하는 툴이 있어. 포토스케이프 (PhotoScapeX). 예전 포토샵 만큼 기능이 좋지는 않지만 블로그에 사용하기에는 딱이야. 포토스케이프를 설치해주고 간략히 사용법을 알려주었다. 나중에 포토스케이프 기능은 좀 더 본격적으로 알려줄 예정이다. (사실 필자도 사용하는 기능만 쓰는지라...)\n\n   ![image-20200515191903035](/Users/audit01/Library/Application Support/typora-user-images/image-20200515191903035.png)\n\n   > 포토스케이프 다운로드 : http://x.photoscape.org/\n\n3. **<u>(첫 번째 글) 이 거 다 작성 했어. 어떤것 같아...?</u>**\n\n   (답변 1) 첫번째 글 품질을 따지지 말고 일단 작성해. 방문자 수도 생각하지말고 글 쓰는 연습한다고 생각해~ \n\n   - 굳이 코멘트 하자면, 한줄 마다 단락 띄우지마. 가독성을 생각해.\n   - 모바일 화면으로 본다면, 이거 읽을 수 없어.\n\n나는 뭐 글을 잘써서 코멘트 하는 것은 아니지만, 먼저 경험해 본 입장에서 내가 느낀점을 알려 주었다. 역시, 처음 생각했던 것 처럼 블로거로써의 특징은 필자보다는 `와이프` 께서 더 능력이 있는 것 같다. ```뭐... IT쟁이가 글을 알면 얼마나 알겠는가 ㅜ_ㅜ```\n\n\n\n와이프님의 블로그 2일차 결과물은 아래와 같다. 와이프님께서 URL을 공개하면 `밥 없다~~` 라고 말씀하셔서, 일단 URL을 공개하지는 않는다. \n\n### 2일차 블로그\n\n![image-20200515185911757](/Users/audit01/Library/Application Support/typora-user-images/image-20200515185911757.png)\n\n\n\n## STEP 3\n\n3일차가 되었다. `와이프` 께서 이렇게 물으신다:\n\n> 왜 당신의 블로그는 구글검색에서 나오지 않냐고...? 헐~\n\n흐음. 블로그 생성한지 3일차인데, 구글검색에 노출되길 원하신다. 만약 이게 가능하다면 이미 `초고수` 반열이다. 그런데 큰일 났다. 생각해 보니 깜박 잊고 `와이프` 님의 블로그를 `구글서치콘솔`에 등록 조차 해두지 않았던 것이다. 누군들 이렇게 첫술에 배부를려고 할줄 알았으랴...\n\n\n\n## 구글서치콘솔(Google Search Console) 등록\n\n구글이든 네이버이든 웹검색엔진이 내 블로그 내용을 거져가(크롤링: crawling)해서, 잘 저장해 놓고(인덱신: Indexing), 누군가 키워드를 검색할 때 노출 시켜주어야 한다. 물론 검색 엔진들의 로봇(ex. googlebot)은 링크를 타고가서 이런 저런 글들을 읽어가지만, 우리는 의도적으로 최대한 블로그를 노출 시켜주기 위해서 명시적으로 내용을 가져가라고 등록해 준다. 이 과정이 각 검색엔진의 웹마스터도구에 정보를 등록해 주는 것이다. \n\n**구글(Google)**이 일일이 내 사이트/블로그를 뒤적거리고 다니지 않아도, 내가 미리 정보를 제공하는데, 파일 구조와 정보를 담아서 sitemap이라는 것을 만든다. 우리는 이것을 표준 포맷인 XML 형태로 만들어서 구글에 알려줄 것이다. 이 과정이 바로 구글 서치 콘솔에 정보를 등록하는 과정이다. 다행하게도, 최근 **구글서치콘솔**에 등록하는 과정을 티스토리(Tistory)에서 간소화 해주었다. 구슬서치콘솔 등록 플러그인을 사용하여 쉽게 등록 할 수 있다. \n\n> 다음(Daum) 검색엔진 등록 : 티스토리(Tistory) 동일 기업(다음카카오)에서 서비스하므로 자동으로 다음검색엔진에 등록해 준다.\n\n\n\n## 티스토리 플러그인 (Plugins)를 최대한 활용하자\n\n**앞에서 언급 했듯이, 티스토리는 플러그인으로 구글서치콘솔 (Google Search Console) 등록을 지원한다.** 별도 Google Search Console에 가서 개별 등록 및 설정하는 수고로움을 덜 수 있다. 이용할 수 있는 것은 최대한 이용해 주도록 하자. 티스토리의 \"관리메뉴 > 플러그인\" 메뉴로 이동하면, 다음과 같이 다양한 플러그인이 제공되고 있다. 이 중에서 구글서치콘솔(`Google Search Console`)  을 찾아서 클릭해 주자.\n\n### ![image-20200515180607097](/Users/audit01/Library/Application Support/typora-user-images/image-20200515180607097.png)\n\n\n\n**구글서치콘솔 플러그인**을 클릭하면 아래와 같은 팝업창을 뜨게 된다. 하단의 `설정 방법`을 참조하여 설정한다. 이미 구글 계정이 있다면 클릭 몇번만으로 설정이 가능하다. 설정 창을 누르면,팝업창이 하나 뜨며 구글 계정 로그인 및 권한 허용을 요구한다. **<u>특별히 위험한 권한은 없고 필요한 권한이므로 모두 허용 으로 클릭해 주면 된다.</u>** 상기 절차가 다 완료되면 최종적으로 티스토리 플러그인 메뉴에서 **적용 버튼**을 클릭해 주면 된다. \n\n![image-20200515181441588](/Users/audit01/Library/Application Support/typora-user-images/image-20200515181441588.png)\n\n\n\n## 구글서치콘솔 등록 확인 및 추가\n\n티스토리의 플러그인 설정이 끝나면, 구글서치콘솔에 방문해서 제대로 적용이 되었는지 재확인해 보도록 하자. 만약 플러그인이 제대로 등록되지 않았다면, 자신으 블로그는 검색이 되지 않을 것이므로 최종 적용 모습을 확인해 주자. `공부도 할 겸`\n\n**구글서치콘솔에 접속한다.** 구글검색창에 `구글서치콘솔`로 검색하거나, [구글서치콘솔URL](https://search.google.com/search-console) 직접 입력하여 구글서치콘솔로 접속한다. 로그인 후, 1) 좌측 메뉴들중 `Sitemaps` 를 누른다. 2) 우측 `제출된 사이트맵`에 자신의 웹사이트 URL이 제대로 등록되어 있는지 확인한다. 등록형식은 `https://xxxxx.tistory.com/sitemap.xml` 형태로 등록되어 있어야 한다. 여기에서 `xxxxx` 표기는 자신의 티스토리 계정명이다. 또는 개인 도메인을 가지고 있는 경우, 개인 도메인과 Sitemap.xml의 URL과 비교하여 정확한지 확인하면 된다. 나중에 티스토리 외, 추가적인 웹사이트를 개설하게 된다면, 여기에 웹사이트 URL과 sitemap.xml을 제출 하면 되니, 이점 기억하길 바란다. \n\n> 과거에는 sitemap.xml을 생성하여 구글서치콘솔에 등록해 주었어야 했으나, 최근 티스토리에서 sitemap 등록을 자동화 해 주었다. \n\n대부분의 경우, 제출된 사이트맵 항목이 1개일 것이다. 티스토리에서는 Sitemap.xml은 등록해 주지만, rss 피드는 등록해 주지 않기 때문ㅇ디ㅏ. rss를 추가로 등록해 주도록 하자.  상단에  `새 사이트맵 추가` 항목에 `https://xxxx.tistory.com/rss` 형식으로 써 준다음 `제출`버튼을 눌러준다.\n\n필자의 제출된 사이트맵은 아래와 같으니, 예로써 참고하길 바란다. \n\n```wiki\nhttps://richwind.co.kr/rss\nhttps://richwind.co.kr/sitemap.xml\n```\n\n![image-20200515181656808](/Users/audit01/Library/Application Support/typora-user-images/image-20200515181656808.png)\n\n\n\n앞서 언급했듯이, 다음(DAUM) 검색엔진에는 별도 웹마스터도구를 사용하지 않아도 알아서 등록해 준다. Tistory가 동일한 기업 서비스이니 자동으로 처리해 주는 것 같다. Daum 기준으로 동일 키워드(Keyword) 2순위까지 올라왔다. \n\n> 정말 예상 외이다. \n\n\n\n### 블로거 3일차, Daum 검색 키워드 2순위\n\n![image-20200515195550772](/Users/audit01/Library/Application Support/typora-user-images/image-20200515195550772.png)\n\n\n\n## 추가 옵션 : 네이버 웹마스터도구 등록\n\n다음/티스토리와는 경쟁 구도에 있는 네이버는 최근 티스토리를 블로그검색에서 제외하였다(검색결과를 블로그 항목에서 일반 웹사이트 항목으로 변경하였다.) 그럼에도 네이버는 국내 검색에서 탑검색엔진으로 간과할 수 없으므로 네이버 웹마스터도구에도 등록이 필요하다. [네이버 웹마스터 도구](https://searchadvisor.naver.com/)에 접속하여, 아래와 같이 사이트를 등록해 줄 필요가 있다. \n\n> 현 시점에서 필수 사항은 아닙니다. 나중에 검색엔진최적화 과정을 진행할 때 같이 할 겁니다.\n\n![image-20200515212401217](/Users/audit01/Library/Application Support/typora-user-images/image-20200515212401217.png)\n\n\n\n네이버 `Search Advisor` 서비스로 들어와 우측 상단에 `웹마스터 도구` 버튼을 눌러 줍니다. 웹마스터 도구에 **사이트 관리** 항목에서 사이트를 등록할 수 있습니다. 아래 필자의 경우, 필자의 사이트 URL `http://richwind.co.kr` 을 등록해 준 결과 입니다. \n\n![image-20200515193845166](/Users/audit01/Library/Application Support/typora-user-images/image-20200515193845166.png)\n\n추후 진행 예정입니다만, 메뉴중에 `간단체크` 항목으로 진입하면, 점검하고자 하는 사이트가 얼마나 구조화 및 최적화가 되었는진 항목점검해 주는 기능이 있습니다. 최소한 아래 기준 항목은 모두 만족을 해야 합니다. 현 시점에서 제 와이프 및 독자 여러분은 아래 항목에 만족을 못하는 항목도 존재 할 것입니다. \n\n\n\n![image-20200515212811107](/Users/audit01/Library/Application Support/typora-user-images/image-20200515212811107.png)\n\n\n\n\n\n\n\n\n\n\n\n","excerpt":"…","fields":{"slug":"/bloging-init-step-by-step/"},"frontmatter":{"date":"May 29, 2021","title":"컴알못 와이프, 블로거로 키우기 - 초보 블로거 따라하기 Step by Step","tags":["gatsby","blog"],"update":"May 29, 2021"}}},{"node":{"rawMarkdownBody":"\n\n[toc]\n\n\n\n\n\n# Python Basic\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 파이썬 기본 문법\n\n\n\n자료형\n\n\n\n제어문\n\n\n\n반복문\n\n\n\n함수와 클래스\n\n\n\n모듈과 패키지\n\n\n\n파일 입출력\n\n\n\n# 문자열 다루기\n\n\n\n\n\n## 문자열 출력하기 \n\n문자열 출력 방법\n\n- print()\n\n- ## 문자열 포매팅\n\n- string.format()\n\n- f\" 문자열 \" \n\n\n\n```python\na = \"abcd\"\nb = \"1234\"\nprint(\"this is \"+ a)\nprint(\"this is \", a)\nprint(\"this is {} \".format(a))\nprint(\"this is {} and {} \".format(a,b))\nprint(\"this is {0} and {1} \".format(a,b))\nprint(\"this is {0} and {1}, {0} \".format(a,b))\n\nprint(f\"this is {a} and {b}\")\n\n\n```\n\n\n\n\n\n\n\n\n# 데이터 분석\n\n\n\n## 데이터분석 1 : NumPy\n\n\n\n\n\n\n\n\n\n\n\n## 데이터 분석 2 : Matplotlib \n\n\n\n\n\n\n\n\n\n## 데이터 분석 3 : SciPy\n\n\n\n\n\n\n\n## 데이터 분석 4 : Pandas \n\n\n\n\n\n\n\n### 엑셀 다루기\n\npython 에서 스프레드시트 (Excel Spread Sheet)를 다루는 모듈. Xlwt, xlsxwriter, openpyxl\n\n- openpyxl : anaconda 배포본에 기본 탑재\n\n\n\n\n\nExcel 데이터를 clipboard 복사 후 사용하기\n\n\n\n```python\nimport numpy as np\nimport pandas as pd\ndf = pd.read_clipboard()\ndf['name'].as_matrix()\n```\n\n\n\n\n\n\n\n### Xml 다루기\n\n\n\n\n\n# 파이썬 고급(Python Advance)\n\n\n\n\n\n## 정규표현식 사용 (Regular Expression)\n\n\n\n\n\n\n\n## TTS (Text to Speech)\n\n\n\n### Google TTS\n\n\n\n#### 구글 TTS 설치\n\n```bash\n$ pip install gTTS\n```\n\n\n\n#### Quick start\n\n```bash\n$ gtts-cli 'hello' --output hello.mp3\n```\n\n\n\n#### python code\n\n```python\nfrom gtts import gTTS\ntts = gTTS('hello. this is the first application')\ntts.save('hello.mp3')\n```\n\n\n\n## 오디오/mp3 재생 (Multimedia play) \n\n\n\n\n\n### Mpg321\n\npython의 기본 모듈 (pyaudio 등)에는 mp3 코덱이 포함되어 있지 않다. 아마도 mp3 라이선스 문제일 것으로 예상된다. 따라서, mp3 와 같은 오디오 재생은 별도의 모듈의 설치가 필요하다. 필자가 사용한 오디오 모듈 중 안정성과 편의성을 고려하여 가장 쉬운 모듈은 `mpyg321`이었다. \n\nmpg321은 가장 단순하면서도 인기가 높은 커맨드라인 (command-line) mp3 플레이어(player) 이다. 명령어줄(command line)에서 `mpg321 파일명.mp3` 입력만으로 mp3를 재생할 수 있다. \n\n> GNU License v.2 (Gerneal Public License v.2)\n\n\n`mpyg321`은 공용 라이브러리인 mpg321을 python으로 감싸놓은 모듈이다. 따라서, mpg321모듈을 먼저 설치하고, mpyg321을 설치한다. \n\n\n\n#### MacOS\n\n```bash\n$ brew install mpg321\n$ pip install mpyg321\n```\n\n\n\n#### Linux\n\n```bash\n$ sudo apt-get install mpg321\n$ pip3 install mpyg321\n```\n\n\n\n#### Windows\n\n```bash\n$ pip install mpyg321\n```\n\n\n\n#### 명령어 라인 사용법\n\n```bash\n$ mpg321 <mp3파일명>\n    or \n$ mpg321 -q <mp3파일명>\n```\n\n> `-q` 옵션은 quite mode 이다.\n\n\n\n#### 파이썬(Python) 코드 사용법\n\n```python\nfrom mpyg321.mpyg321 import MPyg321Player()\nplayer = MPyg321Player()\nplayer.play_song(\"/path/to/some_mp3.mp3\")\n```\n\n> 참조 : https://pypi.org/project/mpyg321/\n\n\n\n또 다른 형태로는, 커멘드라인 구문을 바로 실행 시키는 방법이 있다. \n\n```python\nimport subprocess\nsubprocess.Popen(['mpg321', '-q', path]).wait()\n```\n\n좀 더 단순한 방법으로는 다음과 같은 구문이라 하겠다. \n\n```python\nimport os\nos.system('mpg321 -q '+ path)\n\t    or \nr = os.popen('mpg321 -q '+ path)\n```\n\n\n\n\n\n## pygame \n\n2번째 방법은 pygame 모듈을 사용하는 방법이다. \n\n```bash\n$ pip install pygame\n```\n\n\n\n```python\nfrom pygame import mixer\n\nmixer.init()\nmixer.music.load('hello.mp3')\nmixer.music.play()\n```\n\n\n\n\n\n## GUI 다루기\n\n\n\n\n\n\n\n\n\n# Appendix.1 환경 설정\n\n\n\n## 설치와 구동\n\n\n\n## 개발환경\n\n\n\n### Jupyter notebook\n\n\n\n### Visual Studio Code\n\n\n\n## 가상환경\n\n\n\n### virtual envs\n\n\n\n### kernels\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","excerpt":"toc Python Basic 파이썬 기본 문법 자료형 제어문 반복문 함수와 클래스 모듈과 패키지 파일 입출력 문자열 다루기 문자열 출력하기 문자열 출력 방법 print() 문자열 포매팅 string.format() f…","fields":{"slug":"/python-basic/"},"frontmatter":{"date":"May 29, 2021","title":"실전 예제로 배우는 파이썬 기본 (Python Basic) - 가장 빠르게 배우는 파이썬","tags":["python","markdown"],"update":"May 29, 2021"}}},{"node":{"rawMarkdownBody":"\n# python TEST\n\n## folder test\n\nmd 파일이 한곳에 모여 있으면, image 등 파일관리가 쉽지 않을 수 있다. 따라서 폴더별로 다르게 하는 것도 하나의 방법이다. \n\n폴더를 카테고리별로 나누는 방법도 있을 수 있겠다. \n\n\n\n\n\n\n\n\n\n\n\n","excerpt":"python TEST folder test md 파일이 한곳에 모여 있으면, image 등 파일관리가 쉽지 않을 수 있다. 따라서 폴더별로 다르게 하는 것도 하나의 방법이다.  폴더를 카테고리별로 나누는 방법도 있을 수 있겠다.","fields":{"slug":"/python-test/"},"frontmatter":{"date":"May 29, 2021","title":"md file directory division test","tags":["blog","python","markdown"],"update":"May 29, 2021"}}},{"node":{"rawMarkdownBody":"# 1장. Gatsby 블로그 만들기 1 - JAM stack 개념\n\n\n\n## 자기 자신만의 블로그. 왜?\n\n사람들이 처음 블로그를 시작할 때 주로, Naver, Tistory 등 플랫폼 서비스를 많이 사용한다. 물론, 접근성이 좋고 글을 작성하기 쉽기 때문이다. 그러나 시간이 조금씩 지나감에 따라, 이러한 플랫폼에서 난무하는 저품질 수준의 글에 대한 회의가 들곤 한다. \n\n 이 때문에 최근에는 브런치, Medium 등의 플랫폼으로 이동하는 사용자들도 많아 졌다. 한편, 개발자이거나 개발에 경험이 있는 사용자들의 경우, 자신만의 블로그를 직접 만들어서 사용하곤 한다. 이것에는 다양한 이유가 있겠지만, 대표적으로 자기 자신이 직접 제어/통제하고자 하는 마음도 있고, 블로그와 동시에 최근 FrontEnd기술을 사용하는 것 자체에도 관심이 많은 것 같다. \n\n필자의 경우에는, 주로 마크다운을 활용하여 글을 작성한다. 구글독스(Google Doc)에 작성하기도하고, Notion 등의 메모앱에도 작성하기도 하는데 제대로 정착하지 못하고 떠돌고 있었다. 그러다가 이 서비서 저 서비스에 산발되어 있는 조각들이 낭비 같다는 생각이 들었다. 이러한 이유로 마크다운 파일을 블로그로 만들고 싶었기에, 본인만의 블로그를 만들기 시작하였다. \n\n\n\n## JAM Stack - 정적 웹사이트 생성기 (Static Website Generator)\n\n개인별 이유야 무궁무진하게 다양할 것으로 생각된다. 어쨋든, 이 글을 읽는 독자 또한 자신만의 블로그를 만들어 보기로 결심 했을 것이다. 그렇다면, 이제 웹사이트를 빌드/배포 해야 할 것인데, 과거처럼 WEB/WAS/DB 형태로 구축하는 웹과 서버어플리케이션, DB 개념이 떠오른다. 추후 거론하겠지만, 이는 서버사이드(SSR: Server Side Rendering)에서 동적 데이터를 처리하는 방식으로, 대부분의 연산을 서버에서 담당하고, 클라이언트에서는 그 결과물만 출력하는 방식 이다. \n\n이전 세대 기술로써, 아파치를 사용한 LAMP (Linux, Apache, MySQL, PHP) 스택이 대표적인 SSR 중심의 아키텍처라 할 수 있다. 그런데, 이 방식은 개인 블로그하자고 구축하기에 챙기것도 많고, 기술 스택 자체도 사양 기술이라서 새로 시작하는 블로그에 적용하기는 좀 그렇다. 특히, PHP/MySQL 등 DB를 직접 제어하는 어플리케이션 서버를 사용하기에, 보안에 신경 써야할 항목도 많을 뿐만 아니라, 목적 대비 컴퓨팅 리소스도 좀 낭비가 아닌가 하는 생각도 든다. Naver/Tistory 등 블로그 플랫폼은 이 구조를 상업적인 규모로 운영하고 있다고 보면 된다. \n\n최근 주로 사용되는 웹 서비스 아키텍처로는, MEAN (MongDB, Express, AngularJS, Node JS) Stack이 있다. AngularJS를 ReactJS로 변경하여 MERN Stack이라고도 한다. 그러나, 이 또한 DB가 포함되어 있다. 동적이라는 이야기 임과 동시에 DB 관리를 필요로 한다. 글을 편하게 쓰고 관리하고자 개인 블로그를 만드는데, DB 관리까지 할 여유는 없다. 글을 작성하는 것인지 DB를 관리하는 것인지 알수 없는 형태가 될 것이다. \n\n\n\n![image-20210601172512392](gatsbyBlog_1.assets/image-20210601172512392.png)\n\n이와 관련하여, 최근에는 또다른 JAM (Javascript, API, Markup) Stack이라는 아키텍처가 자주 거론되고 있다. 기술 스택을 보면 알겠지만, DB가 없다.!!!? 처음에는, DB가 없으면 어떻게 글을 쓰고 웹사이트에 퍼블리쉬 하나 싶었다. 결론부터 이야기 하면, 앞으로 JAM Stack의 한 종류인 Gatsby를 이용하여 블로그를 생성할 것이다. \n\n\n\n### JAM Stack \n\n> 한마디로 요약하자면, 서버가 필요없다. 인터넷 저장소/스토리지만 있으면 된다. \n\n> 참조 : https://jamstack.org/why-jamstack/\n\nJAM Stack을 단순하게 이야기 하면, 인터넷 상에 저장된 마크업 파일(HTML 포함)을 불러와서 사용자(Client)의 브라우저에서 보여 주는 것이 전부이다. 이것은 쉽게 생각하면, 네트워크 저장소에 있는 HTML 파일을 브라우저로 오픈한 것을 볼 수 있다. 끝. \n\n사용자 정보을 받고(로그인), 세션을 관리하고, DB에 저장하고, 동적으로 계산하여 다시 사용자에게 보내주는 그런 복잡한 과정이 없다. 그냥, 이미 만들어진 (Static Web)을 보여줄 뿐이다. 다만, 이 과정에서 사용자에게 보여줄 컨텐츠 (Static Web Content)를 만들 때, 여러 경우의 수를 모두 만들어 놓는 것이고, 이 과정에서 Javscript와 API가 사용되는 것 뿐이다. \n\n이러한 개념이기 때문에, 필수적인 요소는 웹저장소(리파지토리)만 있으면 서비스가 가능하다. 사용자 입력, 세션 관리 등이 없기 때문에, 보안이라고 할 만한 요소가 거의 없다. 정적 웹사이트의 컨텐츠는 이미 Public하게 공개된 내용이기 때문에 비밀스럽게 유지할 만한 사항이 아니다. \n\n> 한마디로, AWS S3에만 파일을 올려두고 웹사이트로 보여 주면 된다. (어떻게 정적 파일을 만드느냐가 관건이다.)\n\n> 비밀 정보를 포함한 컨텐츠가 정적 컨텐츠로 변환되는 것은 관리해야 한다. 대표적으로 패스워드, Key, Token등이 공개되지 않도록 관리가 필요하다. \n\n이러한 내용을 생각해 보면 당연한 내용이지만, 다음과 같은 특징을 뽑는다. \n\n- 빠른 성능 : 서버사이드 연산은 이미 컨텐츠 생산 과정에서 끝냈다. 파일전달이 전부다. \n- 높은 보안성 : 이미 거론한 것처럼, 보안이라고 할것이 없다. 모두 공개되어 있는 내용 뿐이다. \n- 비용 효율성, 확장성 : 네트워크 스토리지 혹은 CDN만 있으면 서비스가 가능하다. \n- 운용 효율성 : 운영 시 관리할것이 별로 없다. \n\n> 굳이 거론하였지만, 정적 파일을 인터넷에 공개해 두었을 뿐이므로 당연한 이야기다. \n\n\n\n### 정적 사이트 생성기 (Static Website Generator)\n\n그런데, 이 쯤이면 궁금할 것이다. \n\n### \"그래서 블로그 글을 어떻게 정적 웹파일로 만드는데? 일일이 HTML을 만들어야 하는 것은 아니지?\"\n\n당연히 아니다. 이 때문에 필요한 것이 정정 사이트 생성기 (Static Website Generator)이다. 내가 블로그의 글은 동적으로 작성했지만, 그때 그때 나의 포스팅을 정적 파일(즉, HTML, CSS, JS 파일)로 만들어 주는 것을 의미한다. 기존의 동적 웹어플리케이션 (서버사이드렌더링, SSR: Server Side Rendering)에서 처리하던 모든 경우의 수를 미리 생성하여 HTML로 만들어 놓는 방식이다. 어찌보면 정말 무식할 수도 있는 방법인데, 사용자(Client)측의 컴퓨팅 성능이 향상되면서 이러한 접근 방식도 생겨나게 된것 같다. \n\n> 다양한 경우의 수가 존재하므로, 이 것을 관리하기 위해서 Data를 별도롤 분리하여 관리한다. 보통 JSON파일로 컨텐츠를 분리하였으며, JSON파일을 불러오는 과정에서 API가 사용된다. \n\n그래서, JAM Stack의 핵심은, 정적 웹사이트 생성기라고 할 수 있다. \n\n대표적인 예로, Jekyll, Hugo, Gatsby 등이 정적 웹사이트 생성기 이다. 또한 Github의 Git Pages는 이러한정적 웹사이트를 서비스하는 대표적인 저장소 이다. 때문에, 우리는 Git page에 html파일만 업로드 함으로써, 개인블로그를 운영할 수 있다. ^^;\n\n> Github는 Jekyll을 기본 탑재하고 있다. 따라서, jekyll기반의 소스코드를 업로드하면 내부적으로 jekyll이 정적파일을 생성한다. \n\n\n\n여러가지 정적 웹사이트 생성기 중에서 필자는 `Gatsby` 를 선택하였다. 이 부분은 개인적인 환경에 따라 달라질 것이다. 각 기술별로 장단점이 있으므로 각자에 맞게 선택하면 될것 이다. 간단히 특징만 요약하자면 아래와 같다. \n\n- Jekyll : Github 기본 탑재 \n- Hugo : 최신 언어인 Go언어 기반, 빠른 빌드\n- Gatsby : ReactJS 기반. 다양한 템플릿. GraphQL 기반\n\n> 최근 Gatsby와 유사하지만, SSR과 CSR의 중간 어디쯔음에 있는 Next.js도 핫하다. \n\n\n\n# JAM Stack 개인블로그 만들기를 위한 선택 사항\n\n\n\nJAM Stack과 정적 사이트 생성기에 대한 개념적 이해는 이것으로 마무리하고, 본격적으로 Gatsby로 개인 블로그를 구축하기 위해서 몇가지 선택을 해야 한다. \n\n1) 어디에서 서비스 할 것인가? Gatsby Cloud, Github/GitPage, Netlify, AWS S3, ... \n\n2) 글 작성은 무엇으로 할 것인가? ( Headless CMS) : Netlify CMS, Gatsby Cloud CMS, Word Press, Sanity, Contentful, DatoCMS, 혹은 로컬 PC.\n\n> 참조 : https://jamstack.org/headless-cms/\n\n\n\n다음 그림은 Gatsby에서 공식으로 제안하는 구성도이다. Github에 업로드하고, Gatsby Cloud에서 서비스하는 플랫폼을 제안하고 있다. 그러나, 꼭 이 구성을 따를 필요는 없다. \n\n![Gatsby Architecture](gatsbyBlog_1.assets/deployment-workflow.png)\n\nhttps://www.gatsbyjs.com/static/0fd27b745c1de708f034eaf97c4416e0/d61c2/deployment-workflow.png\n\n위의 선택 사항에 따라서 소폭 차이가 있을 수 는 있으나, 가장 일반적인 선택으로 진행을 해보도록 하겠다. 나머지는 각 서비스별로 설정 상의 차이 정도이다. 필자는 우선 Git Page에 컨텐츠를 저장하여 포스팅을 진행 예정이다. Git Page를 사용한다 함은 위 그림에서, Github와 Gatsby Cloud(저장소)를 하나로 통합하여 사용하겠다는 의미이다. \n\n> 추후 Netlify에서 서비스하는 것을 추가 예정이다. \n\n 또한, Headless CMS는 나중에 적용해도 무관하므로, 일단은 로컬 PC에서 글을 작성 예정이다. 몇몇 Headless CMS를 사용해 보았지만, 필자는 기존 플랫폼 블로그 보다 편리하다는 생각을 못했기 때문에 Headless CMS에 대한 소개는 후일로 미룬다. \n\n\n\n","excerpt":"1장. Gatsby 블로그 만들기 1 - JAM stack 개념 자기 자신만의 블로그. 왜? 사람들이 처음 블로그를 시작할 때 주로, Naver, Tistory…","fields":{"slug":"/gatsbyBlog_1/"},"frontmatter":{"date":"May 29, 2021","title":"개츠비(Gatsby)로 정적웹사이트 및 블로그 만들기 1","tags":["gatsby","blog"],"update":"May 29, 2021"}}},{"node":{"rawMarkdownBody":"\n![Gatsby Thumbnail Image](./gatsbyCover.png)\n\n\n\n# 블로그 만들기\n\n\n기존에 Naver Blog, Tistory Blog를 사용하다가 github를 사용하여 개인 블로그를 만들게 되었습니다. Github에서 제공하는 Publish 방법인 Github Page와 정적 웹페이지 생성기인 Gatsby를 사용하였습니다. Gatsby로 별도 블로그를 만들어야지 하는 생각은 오래전 부터 있었는데, 미뤄 두었다가 이제서야 생성했네요.\n\nGatsby 는 다른 분이 만들어 놓은 테마를 수정해서 사용했습니다. \n\nGithub Page Setting이 의외로 시간이 걸렸습니다. \n\nCustom DNS 세팅을 하는데,\nsubdomain으로 하면, CNAME으로만 등록해야 되네요.\nIT만 20년이 넘게 일했는데, DNS 세팅을 하다가 실제로 써보면서 배우는점이 아직도 많네요.\n역시 해보면서 배우나 봅니다. \n\n기존에 블로그들의 스킨들로 스트레스 받은 것을 날려버리고,\n이제 좀 글에만 집중을 하고 싶습니다. \n\n## Markdown 글쓰기\n\n개인적을markdown 위주로 글쓰기에 가장 고민 스러운 부분이 2가지가 있습니다. \n- 1) 이미지 삽입의 불편성 \n- 2) 색상 변경 불가\n\n### 이미지 삽입의 불편함\n블로그를 작성하다 보면 이미지 삽입이 자주 발생합니다. ***특히, 화면캡쳐 후 바로 삽입 같은 경우입니다.*** 그런데, 마크다운을 사용하여 블로그를 작성하면, 이미지를 파일로 저장하고 저장된 이미지를 path를 걸어서 사용하는 불편함이 있습니다. 블로그를 운영해 본 분은 잘 아시겠지만 이미지가 한두장도 아니고 일일이 이렇게 처리하기에는 무척 번거롭습니다. 현재 이 때문에 이미지 붙여 넣기에 특화된 마크다운 에디터 `typora`를 사용중입니다만, 제 마음 같지 않네요. \n\n이 부분은 좀 더 편한 방법을 좀 고민해봐야 겠습니다. \n\n### <span class='markdown-head'>글자 색상 변경 </span>\n원칙적으로 마크다운은 글자 색상 지정이 없습니다. 꼼수로 HTML 태그를 끼워넣어 색상을 표현하는 경우도 있긴 합니다. 그런데, 어차피 마크다운으로 넘어온 이유가 글의 일관된 템플릿으로 사용하기 위함이 었기 때문에, 자유도가 높을 필요는 없을 것 같습니다. \n그러나, 색상 자체가 1개 단일색 이라는 것은 참.. 단조롭긴 합니다.  1~2개의 색상만이라도 추가적으로 사용할 수 있으면 합니다. \n\n따라서, 마크다운 자체가 아니라, 마크다운을 파싱하고 난 다음 마크다운 파싱을 html로 옮겨올 때 설정으로 미리 지정된 색상을 끼워 넣어 볼가 합니다. \n이부분은 추가적인 연구가 좀 필요하겠습니다. \n이런 과정을 미리 겪어보신 분이 있다면 의견 부탁 드립니다. \n\n### 추가 고민\n\n> 아직 걱정할 일은 아닙니다만, Github 용량을 이미지만으로 채울 수 없으니,\nimage cdn 도는 AWS S3에 저장해 놓고 링크만 걸어야 할지도 고민중입니다.\n\n일단, Github로 운영을 좀 해보다가, 다른 frontend 서비스로 변경해야 할지는 차차 고민해 볼 예정입니다. \n<span style=\"font-family:Papyrus\">ex) Netlify, AWS CloudFront, AWS Amplify, 등..</span>\n\n[블로그](https://richwind.co.kr)\n\n\n<style>\n      .markdown-body {\n        font-size:10em;\n          box-sizing: border-box;\n          min-width: 100px;\n          max-width: 980px;\n          margin: 0 auto;\n          padding: 15px;\n      }\n      .markdown-head {\n        color:red;\n        font-size:2em;\n        font-family:Papyrus;\n      }\n      h2 {\n        color : blue;\n      }\n      h1 {\n        color : skyblue;\n      }\n  </style>","excerpt":"블로그 만들기 기존에 Naver Blog, Tistory Blog를 사용하다가 github를 사용하여 개인 블로그를 만들게 되었습니다. Github에서 제공하는 Publish 방법인 Github Page와 정적 웹페이지 생성기인 Gatsby…","fields":{"slug":"/how-to-make-gatsby-blog/"},"frontmatter":{"date":"Jun 06, 2020","title":"how to make blog with the gatsby","tags":["gatsby","blog"],"update":"Jun 07, 2020"}}},{"node":{"rawMarkdownBody":"\n게시물에 태그를 지정할 수 있습니다.\n\n해당 게시물의 Markdown YAML Front matter은 아래와 같습니다.\n\n```\n---\ntitle: Tag, 태그 게시물 예제\ndate: 2019-07-30\ntags:\n  - tag\n  - 태그\n---\n```\n\n가이드의 Markdown YAML Front matter를 참고하세요.\n\n자세한 가이드는 [Documents](<https://github.com/junhobaik/junhobaik.github.io/wiki/Document-(Borderless)>)를 확인해주세요.\n","excerpt":"게시물에 태그를 지정할 수 있습니다. 해당 게시물의 Markdown YAML Front matter은 아래와 같습니다. 가이드의 Markdown YAML Front matter를 참고하세요. 자세한 가이드는 Documents를 확인해주세요.","fields":{"slug":"/tag-post-example/"},"frontmatter":{"date":"Mar 24, 1991","title":"Tag, 태그 게시물 예제","tags":["tag","태그"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n![](screenshot.png)\n\n이미지 파일이 첨부된 게시물의 예제입니다.\n\n폴더를 만들고 폴더의 제목이 해당 게시물의 주소가 됩니다.\n\n게시물 파일명은 index.md 로 합니다.\n\n이미지 파일은 폴더 내에 위치시킵니다.\n\n자세한 가이드는 [Documents](<https://github.com/junhobaik/junhobaik.github.io/wiki/Document-(Borderless)>)를 확인해주세요.\n","excerpt":"이미지 파일이 첨부된 게시물의 예제입니다. 폴더를 만들고 폴더의 제목이 해당 게시물의 주소가 됩니다. 게시물 파일명은 index.md 로 합니다. 이미지 파일은 폴더 내에 위치시킵니다. 자세한 가이드는 Documents를 확인해주세요.","fields":{"slug":"/image-post-example.md/"},"frontmatter":{"date":"Mar 24, 1991","title":"Image, 이미지 게시물 예제","tags":["undefined"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n블로그를 본인에 맞춰 커스터마이징하려면 우선 config.js의 수정이 필요합니다.\n\n[Documents](<https://github.com/junhobaik/junhobaik.github.io/wiki/Document-(Borderless)>)를 확인해주세요.\n","excerpt":"블로그를 본인에 맞춰 커스터마이징하려면 우선 config.js의 수정이 필요합니다. Documents를 확인해주세요.","fields":{"slug":"/first-post/"},"frontmatter":{"date":"Mar 23, 1991","title":"Borderless Documents","tags":["test","blog"],"update":"Mar 08, 2020"}}}]}},"pageContext":{}},"staticQueryHashes":["3649515864","3998623811","63159454"]}