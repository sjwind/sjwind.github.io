{"componentChunkName":"component---src-templates-post-tsx","path":"/python-EDA-001/","result":{"data":{"markdownRemark":{"html":"<p>[toc]</p>\n<h1 id=\"python\" style=\"position:relative;\"><a href=\"#python\" aria-label=\"python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python</h1>\n<h2 id=\"bash-command-execution\" style=\"position:relative;\"><a href=\"#bash-command-execution\" aria-label=\"bash command execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bash command execution</h2>\n<p>다음은 파일명에서 \"CPU\"라는 문자열을 포함한 파일만을 출력하여 준다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> CPU</code></pre></div>\n<p>어떠한 대용량 데이터가 특정조건에 따라 파일로 작게 나뉘어 있는 경우가 있는데, 특정 조건으로만 파일을 불러들여 처리하는 경우가 종종 발생한다. 실제로 필자는 CPU 관련한 데이터를 기록한 xml을 개별로 취급할 때 사용하였다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~/my_dev/ai_secu2020/src\n$ <span class=\"token function\">ls</span> <span class=\"token punctuation\">..</span>/data/NMS10_XMLs <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> CPU\nFW_12348573_125.57-N_CPU.xml\nFW_12348584_172.18-N_CPU.xml\n  <span class=\"token punctuation\">..</span>.</code></pre></div>\n<h3 id=\"sed-를-이용한-문자열-치환\" style=\"position:relative;\"><a href=\"#sed-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%B9%98%ED%99%98\" aria-label=\"sed 를 이용한 문자열 치환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sed 를 이용한 문자열 치환</h3>\n<p>필자는 데이터 전처리의 초기 단계에서 종종 bash command를 사용한다. 대표적으로 sed, cut, awk 등의 명령어가 있다. sed는 쉽고 빠르게 io만을 이용하여 문자열을 치환해 준다. 복잡하지 않은 단순 치환이라면 sed명령어는 매우 유용하다고 할 수 있다. 문자열을 취급하다보면, 개행문자(<code class=\"language-text\">\\n</code>) 등의 command 문자나, 빈칸 (White Space)제거 또는 주석(Commet) 제거 등이 자주 사용된다. </p>\n<p>파일명 등 bash 에서 취급하는 문자열의 처리에 유용할 뿐만 아니라, 실제 Contents 처리에도 유용하다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> sample.txt <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/<span class=\"token entity\" title=\"\\n\">\\n</span>//g'</span></code></pre></div>\n<blockquote>\n<p>개행문자(<code class=\"language-text\">\\n</code>)을 ''으로 치환한다. 즉, 개행문자를 삭제한다. </p>\n</blockquote>\n<p>만약 <code class=\"language-text\">Jupiter notebook</code> 또는 IPython을 사용한다면, <code class=\"language-text\">%</code>  또는 <code class=\"language-text\">!</code>을 사용하여 bash command를 실행할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">%</span> cat sample<span class=\"token punctuation\">.</span>txt <span class=\"token operator\">|</span> sed <span class=\"token string\">'s/\\n//g'</span></code></pre></div>\n<p>다음과 같이 <strong>Python</strong> 으로 python을 직접 파일을 읽어서, 문자열을 처리하는 방법도 있으나, 데이터의 양이 많거나, 파일이 여러개인 경우 bash 명령어로 처리한다면 쉽게 동일 작업을 수행할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sample.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>sed를 사용하는 방법은 매우 간편할 뿐만 아니라, Bash 명령어를 사용하여 새롭게 치환된 파일을 생성하면, 실제 데이터를 처리하는 python 모듈의 메모리를 절약할 수 있다. </p>\n</blockquote>\n<p>물론 파이썬으로 처리하면, 하나의 py파일에서 일관되게 처리를 할 수 있는 장정도 있다. 그러나, 적용해야하는 파일이 다수개인 경우 역시나 bash 명령어가 편하다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> CPU <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/<span class=\"token entity\" title=\"\\n\">\\n</span>//g'</span></code></pre></div>\n<blockquote>\n<p>현재 working directory 에 존재하는 파일중, 파일명에 CPU가 포함되어 있는 파일을 대상으로, 모든 개행문자를 제거한다. </p>\n</blockquote>\n<p>다음은 bash script의 for문을 활용하여, 모든 파일에 대하여 실행한 sed 결과를 새로운 파일(<code class=\"language-text\">modify-&lt;기존파일명&gt;</code>)에 저장한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">filename</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> CPU<span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token function\">sed</span> <span class=\"token string\">'s/<span class=\"token entity\" title=\"\\n\">\\n</span>//g'</span> <span class=\"token variable\">$filename</span> <span class=\"token operator\">></span> modify-<span class=\"token variable\">$filename</span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>python으로 관리하는 프로젝트에서 bash script까지 별도로 진행되기 때문에 관리의 불편함을 느낄 수도 있다. 이라한 경우, bash script의 관리가 불편하다면, bash script 파일을 하나 만들어 두고, script 파일의 실행만을 python으로 진행하면 된다. </p>\n<p>혹시, 이것도 관리가 번거롭다면, 다음과 같이 python 자체에서 bash script를 만들어 주고, 실행해 주면 된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n\nstrDataPath <span class=\"token operator\">=</span> <span class=\"token string\">'./data'</span>\nstrScript <span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">\"\"\"\n#!/bin/bash\ncd {}\nfor filename in $(ls | grep CPU); do\n   sed 's/\\n//g' $filename > modify-$filename\ndone\ncd -\n\"\"\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>strDataPath<span class=\"token punctuation\">,</span> strMode<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'modifyScript.sh'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wt'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span>\n    fp<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>strScript<span class=\"token punctuation\">)</span>\n\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x modifyScript.sh'</span><span class=\"token punctuation\">)</span>\nos<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'./modifyScript.sh'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>current directory 와 다른 path에서 작업을 하고 싶다면, cd <path>를 수행하여 directory를 변경하고, <code class=\"language-text\">cd -</code> 명령을 통해서 원래의 directory로 복귀할 수 있다. </p>\n</blockquote>\n<p>Python의 이슈는 아니지만, 주의할 사항으로 스크립트파일(ex. <code class=\"language-text\">script.sh</code>)을 생성하고 난 후 실행 권한 ( <code class=\"language-text\">+x</code>)을 부여해 주는 것을 간과하기 쉬우므로 유의하기 바란다. 스크립트 파일을 생성하고, 실행권한을 부여 후 <code class=\"language-text\">os.system()</code>함수로 실제 스크립트를 구동해 준다. </p>\n<h3 id=\"python-cmd프로세스-실행\" style=\"position:relative;\"><a href=\"#python-cmd%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%8B%A4%ED%96%89\" aria-label=\"python cmd프로세스 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python CMD/프로세스 실행</h3>\n<p>Python에서 외부 프로세스 실행하는 방법은 크게 3가지 방법이 있다. </p>\n<h4 id=\"ossystem\" style=\"position:relative;\"><a href=\"#ossystem\" aria-label=\"ossystem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>os.system()</h4>\n<p>python에서 shell 명령어를 실행하기에 가장 단순하고 편리한 방법은 system() 함수를 사용하는 방법이다. </p>\n<p><code class=\"language-text\">os.system( &#39;명령어&#39; )</code> 형태로 실행할 수 있다. 간단한 스크립트를 실행하거나, 또다른 python을 구동할 때, 서비스를 구동 시킬 때 등 사용할 수 있다. 다음과 같은 예제를 들어 볼 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'chmod +x test.sh'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그러나, os.system()은 실행 결과에 대한 실행여부만 반환해 준다. 정상 실행은 <code class=\"language-text\">0</code> , 비정상 실행은 <code class=\"language-text\">에러코드값</code>을 반환해 준다. 대표적으로, <code class=\"language-text\">ls</code> 명령어로 현재 디렉토리의 파일 리스트를 확인할 수 없다.  다음과 같이 실행은 할수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">></span> 결과값 <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></code></pre></div>\n<blockquote>\n<p>실행은 해준다. 그러나 결과값을 확인 할 수 없다.</p>\n<p>Ipython 또는 jupyter notebook 사용자라면, magic command(<code class=\"language-text\">%명령어</code>)로 단순하게 실행도 가능하다. ex.  <code class=\"language-text\">%ls</code></p>\n</blockquote>\n<h4 id=\"ospopen\" style=\"position:relative;\"><a href=\"#ospopen\" aria-label=\"ospopen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>os.popen()</h4>\n<p>문제를 단순화 해서, python 내부에서는 어떻게 <code class=\"language-text\">ls 명령어</code>의 실행 결과를 확인하고, 결과값들을 저장할 수 있는가? <code class=\"language-text\">os.system()</code>은 결과값을 반환해 주지는 않기 때문에 다른 명령어가 필요하다. </p>\n<p><code class=\"language-text\">os.popen()</code>함수는 결과값을 반환해 준다. 좀 더 자세하게, 결과값보다는 실행하는 handle 또는 file descriptor를 반환해 준다. 따라서, os.system()함수처럼 호출하는 즉시 실행되는 것보다는, 실행구문을 지정하고 이후 read를 할 때 실행되는 구조이다. 함수의 이름에서 추측할 수 있듯이 <code class=\"language-text\">open</code>계열의 함수 이다. 파일을 오픈하는 것과 동일하게 Process를 open하는 개념이다. linux 계열의 kernel은 모든 것을 file로 보듯이, fd(file descriptor)로서 process를 오픈/실행하는 것으로 생각해 볼 수있다. 어찌 보면, lazy execution과 비슷한 방식이라고도 할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">cmd <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>popen<span class=\"token punctuation\">(</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">)</span>\nval <span class=\"token operator\">=</span> cmd<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>os.popen()을 실행하는 시점에 명령어가 수행되는 것은 아니다. 오히려 <code class=\"language-text\">cmd.readlines()</code> 시점에서 명령어가 실행된다. </p>\n</blockquote>\n<p>다음은 필자가 실제 사용하고 있는 코드중 일부를 발췌하였다. 파일 들중에서 <code class=\"language-text\">CPU</code> 문자열을 포함한 파일만을 선별하여 파일명을 얻어오는 과정이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">strDataPath <span class=\"token operator\">=</span> <span class=\"token string\">'../data/NMS10_XMLs/'</span>\nstrCmd <span class=\"token operator\">=</span> <span class=\"token string\">\"ls {} | grep CPU\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>strDataPath<span class=\"token punctuation\">)</span>\nstrFile <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>popen<span class=\"token punctuation\">(</span>strCmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strFile<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"subprocess-실행-방법\" style=\"position:relative;\"><a href=\"#subprocess-%EC%8B%A4%ED%96%89-%EB%B0%A9%EB%B2%95\" aria-label=\"subprocess 실행 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>subprocess 실행 방법</h4>\n<p>os 모듈은 기본적으로 os에서 제공하는 기능을 사용하는 모듈이다. 좀 더 전문적으로 process자체를 다루기 위해서 <code class=\"language-text\">subprocess</code> 모듈을 제공하고 있다. 단순히 명령어를 실행해 준다는 개념보다는 process를 다루는 개념이며, 이중에서 process를 실행해서 결과를 받아오는 함수가 일부 포함되어 있는 것이다. 좀 더 하위 레벨에서 process와 thread 등을 다룰 때 사용할 수 있다. </p>\n<p><code class=\"language-text\">os.system()</code>는 동일 process에서 명령을 수행 후 종료하지만, <code class=\"language-text\">subprocess</code> 에 포함된 함수는 새로운 child process를 생성하여 실행한다. (fork) . 따라서, process 실행에 대한 상세 argument 들을 제어할 수 있다. </p>\n<blockquote>\n<p>실행의 반환값은 CompletedProcess 개체이다. CompoletedProcess는 기본적으로 args, returncode, stdout, stderr를 포함하며, stdout과 stderr는 None을 기본값으로 한다. </p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> subprocess\nr <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>결과는 실행코드이다. 성공:0, 에러:1</p>\n</blockquote>\n<p>기본적으로 stdout, stderr는 capture하지 않는다. (capture_otput=False) stdout을 확인하기 위해서는 caputre=True로 변경해 준다.  다음을 실행해 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> subprocess\nr <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">,</span> capture_output<span class=\"token operator\">=</span><span class=\"token boolean\">True</span> <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">)</span></code></pre></div>\n<p>subprocess는 low level function으로 실행결과가 bytes 라는 점에 유의가 필요하다. 이러한 이유로, <code class=\"language-text\">utf-8</code>의 bytes를 string으로 디코딩(decode)해줄 필요가 있다. 다음은 명령어 실행 결과로 얻은 최종 문자열의 리스트 이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">fileList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>splitlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>바이트 (utf-8로 인코딩된 byte)를 문자열로 변환하는 과정은 다음은 참조하기 바란다. </p>\n<h6 id=\"byte-to-string\" style=\"position:relative;\"><a href=\"#byte-to-string\" aria-label=\"byte to string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Byte to String</h6>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token string\">b'AAAA\\n'</span>\nb <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"ipython-magic-command\" style=\"position:relative;\"><a href=\"#ipython-magic-command\" aria-label=\"ipython magic command permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IPython Magic Command</h4>\n<p>외부 명령어 실행까지는 아니지만 shell command 명령어로 한정한다면, Ipython 의 매직 커맨드 (magic command)를 활용할 수 있다. 앞서 잠깐 언급했듯이 ipython 또는 jupyter notebook 환경에서는 몇몇 매직커맨드를 제공하고 있다. 이중에서 shell command 실행을 지원하는 기능이 포함되어 있다.  다음과 같이 png 이미지 파일 리스트를 바로 확인 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">%</span>ls <span class=\"token operator\">|</span> grep png</code></pre></div>\n<p>그러나 이와 같은 겨우, notebook의 cell에서 결과 확인은 가능하나, 여러개의 파일을 자동화 처리하기 위해서는 변수로 저장해야 한다. 이와 같은 경우 기본 매직커맨드 (<code class=\"language-text\">%</code>) 구문 대신 <code class=\"language-text\">!</code>를 사용하여 결과 같을 변수로 저장할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">r <span class=\"token operator\">=</span> !ls <span class=\"token operator\">|</span> grep png\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"기타-python-os-모듈기능\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-python-os-%EB%AA%A8%EB%93%88%EA%B8%B0%EB%8A%A5\" aria-label=\"기타 python os 모듈기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 python os 모듈기능</h4>\n<p>앞서 설명한 방법들은 외부 명령어 실행에 대한 범용적인 방법이다. 그러나, python의 os모듈에는 자주 사용하는 shell 명령어 들을 이미 함수로 제공하고 있다. listdir(), makedir(), chdir() 등이 대표적인 예라 할 수 있다. 다음 명령어 라인을 참조하기 바란다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># list dir</span>\nos<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># make a dir</span>\nos<span class=\"token punctuation\">.</span>rmdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># remove a dir</span>\nos<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># rename a old one to  a new one</span>\n\nos<span class=\"token punctuation\">.</span>path\nos<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>파일 또는 디렉토리명<span class=\"token operator\">></span> <span class=\"token punctuation\">)</span>  <span class=\"token comment\"># check if it exists</span>\nos<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># check if it is a directory</span>\nos<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># check if it is a file</span>\nos<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># get current dir</span>\nos<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># change dir</span></code></pre></div>\n<p>경우에 따라서는, python에서 외부 명령어를 실행할 때, 환경변수가 필요한 경우가 있다. <code class=\"language-text\">os.environ</code>은 환경변수를 설정을 지원한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">env <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ\nenv<span class=\"token punctuation\">[</span><span class=\"token string\">'PATH'</span><span class=\"token punctuation\">]</span>\npath2 <span class=\"token operator\">=</span> <span class=\"token string\">r'&lt;add path dir>;'</span> <span class=\"token operator\">+</span> env<span class=\"token punctuation\">[</span><span class=\"token string\">'PATH'</span><span class=\"token punctuation\">]</span> \nenv<span class=\"token punctuation\">[</span><span class=\"token string\">'PATH'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> path2</code></pre></div>\n<blockquote>\n<p>환경변수의 설정은 현재 open된 창에만 적용된다. (메모리에만 존재한다. )</p>\n</blockquote>\n<h4 id=\"응용\" style=\"position:relative;\"><a href=\"#%EC%9D%91%EC%9A%A9\" aria-label=\"응용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>응용</h4>\n<h5 id=\"디렉토리-부재-시-디렉토리-생성\" style=\"position:relative;\"><a href=\"#%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EB%B6%80%EC%9E%AC-%EC%8B%9C-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EC%83%9D%EC%84%B1\" aria-label=\"디렉토리 부재 시 디렉토리 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디렉토리 부재 시 디렉토리 생성</h5>\n<p>개발을 진행하다 보면, 경우에 따라서 subdirectory를 사용하게 된다. 데이터를 참조하거나 저장할 때 sub-directory를 사용하는 경우도 많다. 로직의 흐름에 따라서 sub-directory가 존재하지 않는 경우도 발생하는데, 이런 경우 디렉토리 존재 여부를 확인하고 생성해 줄 필요가 있다. </p>\n<p>다음은 현재 디렉토리를 기준으로  <code class=\"language-text\">../dev/img</code> 디렉토리가 존재하는지 확인 후, 해당 디렉토리가 없다면 디렉토리를 생성한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># path check and make dir</span>\nstrPath <span class=\"token operator\">=</span> <span class=\"token string\">'../dev'</span>\nrePath <span class=\"token operator\">=</span> <span class=\"token string\">\"{}/img\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>strPath<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>rePath <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>makedirs<span class=\"token punctuation\">(</span>rePath<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h2 id=\"xml-parsing\" style=\"position:relative;\"><a href=\"#xml-parsing\" aria-label=\"xml parsing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>XML Parsing</h2>\n<p>우선 xml 파싱하는 기본 구문부터 살펴 보자. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> xml<span class=\"token punctuation\">.</span>etree<span class=\"token punctuation\">.</span>ElementTree <span class=\"token keyword\">as</span> eTree \n\nxmlTree <span class=\"token operator\">=</span> eTree<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string\">'./test.xml'</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> xmlTree<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'./rra'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">xml.etree.ElementTree</code> 모듈에 있는 <code class=\"language-text\">parse</code>함수를 사용하면, xml을 손쉽게 로딩할 수 있다. Xml을 파싱하여 얻은 개체에서 find / findall 등의 명령어를 사용하여 하위 tag를 개체로 가져올 수 있다. 좀 더 상세한 내용을 알아보기 전에, 분석해야하는 샘플 xml의 구조를 확인하고 진행하도록 하자. </p>\n<p>파싱하고자 하는 XML의 파일 구조는 다음과 같은 구조를 가지고 있다. 데이터에 관련한 속성(property)를 가지고 있으며, 주요 데이터값은 <code class=\"language-text\">RRA-&gt; Database -&gt; row -&gt; v</code> 에 데이터가 행으로 보유하고 있는 형식이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"mermaid\"><pre class=\"language-mermaid\"><code class=\"language-mermaid\">graph LR\nclassDef dotOutline fill:#f96,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5, 5\nRRD --&gt; version\nRRD --&gt; step\nRRD --&gt; lastUpdate\nRRD --&gt; RRA:::dotOutline\n\nRRA --&gt; cf\nRRA --&gt; pdp_per_row\nRRA --&gt; database:::dotOutline\n\ndatabase --&gt; date\ndatabase --&gt; time\ndatabase --&gt; row:::dotOutline\nrow --&gt; v:::dotOutline</code></pre></div>\n<p>다음은 파싱(Parsing) 하고자하는 실제 xml 파일의 일부를 발췌한 문서이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token doctype\">&lt;!DOCTYPE rrd SYSTEM \"http://oss.oetiker.ch/rrdtool/rrdtool.dtd\"></span>\n<span class=\"token comment\">&lt;!-- Round Robin Database Dump --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rrd</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0003<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>step</span><span class=\"token punctuation\">></span></span>60<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>step</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- Seconds --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>lastupdate</span><span class=\"token punctuation\">></span></span>1441253228<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>lastupdate</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- 2015-09-03 13:07:08 KST --></span>\n\t<span class=\"token comment\">&lt;!-- Round Robin Archives --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rra</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cf</span><span class=\"token punctuation\">></span></span>AVERAGE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cf</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pdp_per_row</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pdp_per_row</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!-- 60 seconds --></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>database</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>date</span><span class=\"token punctuation\">></span></span>2015-09-01 13:08:00<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>date</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>time</span><span class=\"token punctuation\">></span></span>1441080480<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>time</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>row</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>v</span><span class=\"token punctuation\">></span></span>2.0000000000e+00<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>v</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>row</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>date</span><span class=\"token punctuation\">></span></span>2015-09-01 13:09:00<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>date</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>time</span><span class=\"token punctuation\">></span></span>1441080540<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>time</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>row</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>v</span><span class=\"token punctuation\">></span></span>2.0000000000e+00<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>v</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>row</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>date</span><span class=\"token punctuation\">></span></span>2015-09-01 13:12:00<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>date</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>time</span><span class=\"token punctuation\">></span></span>1441080720<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>time</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>row</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>v</span><span class=\"token punctuation\">></span></span>2.0000000000e+00<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>v</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>row</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>database</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rra</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rrd</span><span class=\"token punctuation\">></span></span>\n&lt;/</code></pre></div>\n<h1 id=\"test-01\" style=\"position:relative;\"><a href=\"#test-01\" aria-label=\"test 01 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>test 01</h1>","excerpt":"toc Python Bash command execution 다음은 파일명에서 \"CPU\"라는 문자열을 포함한 파일만을 출력하여 준다.  어떠한 대용량 데이터가 특정조건에 따라 파일로 작게 나뉘어 있는 경우가 있는데, 특정 조건으로만 파일을 불러들여 …","tableOfContents":"<ul>\n<li>\n<p><a href=\"/python-EDA-001/#python\">Python</a></p>\n<ul>\n<li>\n<p><a href=\"/python-EDA-001/#bash-command-execution\">Bash command execution</a></p>\n<ul>\n<li><a href=\"/python-EDA-001/#sed-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%B9%98%ED%99%98\">sed 를 이용한 문자열 치환</a></li>\n<li><a href=\"/python-EDA-001/#python-cmd%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%8B%A4%ED%96%89\">Python CMD/프로세스 실행</a></li>\n</ul>\n</li>\n<li><a href=\"/python-EDA-001/#xml-parsing\">XML Parsing</a></li>\n</ul>\n</li>\n<li><a href=\"/python-EDA-001/#test-01\">test 01</a></li>\n</ul>","fields":{"slug":"/python-EDA-001/"},"frontmatter":{"title":"Python EDA","date":"May 29, 2021","tags":["blog","python","markdown"],"keywords":["EDA","Python","Python EDA"],"category":"undefined","update":"May 29, 2021","titleImage":null},"fileAbsolutePath":"/Users/windstream/my_dev/blog/sjwind/gatsby/markdown/python/python-EDA-001.md"}},"pageContext":{"slug":"/python-EDA-001/","series":[],"lastmod":"2021-05-29"}},"staticQueryHashes":["3649515864","3998623811","63159454"]}